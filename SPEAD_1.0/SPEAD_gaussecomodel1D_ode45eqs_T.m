function [Vdot] = SPEAD_gaussecomodel1D_ode45eqs_T(iTime,V0)
global galfa gbeta
global gzmax kgz mz betaz mpower  
global mp Isat InhFac numuty
global alp0 mup0
global Q10a Q10h % Distinct partition coefficients for auto and heterotrophic processes
global ntot0 
global temp0 temp 
global jcounter  
global keyPhysics 
global omePhy epsZoo omeZoo md 
global deltat
global zdepths ndepths deltaz
global jday
global Iyave_T Iyyvar_T
global Iphy Izoo Idin Ipon Ibox
global KZ
global parz0
global kw wsink
%................................................................................... 
global UYday GYday 
global todedotday 
%...................................................................................
global todedotout 
%...................................................................................
global FPHYToutcont MPHYToutcont GPHYToutcont %OUTPUTS 
global FZOOoutcont  EZOOoutcont  MZOOoutcont 
global FDINoutcont  FPONoutcont
%...................................................................................

%%%%%%%%%%%%%%%%%
%STATE VARIABLES:
%%%%%%%%%%%%%%%%%
%===================================================================================
%...................................................................................
% eps constraint added by Le Gland (21/11/2019)
phy  = max(V0(Iphy),sqrt(eps));
zoo  = max(V0(Izoo),sqrt(eps));
din  = max(V0(Idin),sqrt(eps));
pon  = max(V0(Ipon),sqrt(eps));
box  = max(V0(Ibox),sqrt(eps));
%...................................................................................
%===================================================================================
%VERTICAL MIXING OF STATISTICAL MOMENTS:
%...................................................................................
if strcmp(keyPhysics,'not')
    %...............................................................................
    yave  = V0(Iyave_T) ;
    yyvar = V0(Iyyvar_T);
    %...............................................................................
elseif strcmp(keyPhysics,'yes')
    %...............................................................................
    yave_star  = V0(Iyave_T) ;
    yyvar_star = V0(Iyyvar_T);
    %...............................................................................
    yave  = (yave_star ./phy);
    yyvar = (yyvar_star./phy) - yave.^2;
    %...............................................................................
end
% Protection against negative variances and out-of-range correlations
yyvar = max(10*sqrt(eps), yyvar); 

%...................................................................................
%===================================================================================
%................................................................................... 
VNPZD0 = [phy;zoo;din;pon]; 
%...................................................................................
%VSTAT0 = [xave,xxvar];
%................................................................................... 
%===================================================================================

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%DAY OF SIMULATION ANT TIME COUNTER:
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%===================================================================================
%...................................................................................
[jday,newday] = SPEAD_1D_daycounter(jday,iTime); % I simplify the function
%...................................................................................
jcounter = floor(iTime/deltat); %For ode4.
% $$$ jcounter = floor(iTime/deltat) + 1; %For ode1.
%...................................................................................
%===================================================================================

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%CHECK FOR NEGATIVE CONCENTRATIONS:
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%========================================================================
%........................................................................
Ineg = find(VNPZD0 < 0);
%........................................................................
if ~isempty(Ineg > 0)
    iTime
    disp(['P , Z , N , D']);
    wconcs = [phy,zoo,din,pon]
    wconcsNeg = VNPZD0(Ineg);
    disp('Error!!! there are NEGATIVE concentrations!')
    pause
end
%........................................................................
%========================================================================

%%%%%%%%%%%%%%%%%%%
%MASS CONSERVATION:
%%%%%%%%%%%%%%%%%%%
%===================================================================================
%...................................................................................
ntoti = sum(phy + zoo + din + pon + box); %Checking mass conservation.
%...................................................................................
%%ydistmax = 1d-6; %original. 
ydistmax = 1d-3; %less strict level (for fast-numerical-solving)
ydist = abs(ntoti - ntot0);
%...................................................................................
%%if strcmp(keyNutrientSupply,'not') 
if abs(ydist) > ydistmax 
    masscheck_N = [iTime,jday,ntot0,ntoti,ydist]
    disp('Error!!! mass is NOT conserved!')
    pause
end 
%%end 
%...................................................................................
if mod(jday,10) == 0 % jjday is useless and can be replaced by jday (Le Gland, 13/09/2019)
    if strcmp(newday,'yes')
    masscheck = [iTime,jday,ntot0,ntoti,ydist]
    % disp('-------------------------------------------------')
    end
end
%...................................................................................
%===================================================================================

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%MEAN TRAIT (j) OF THE GAUSSIAN DISTRIBUTION:
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%===================================================================================
%...................................................................................
yj = yave; 
%ymj = yave; 
%...................................................................................
sigmayj = sqrt(yyvar);
%...................................................................................
%===================================================================================

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%CHECK FOR NEGATIVE VARIANCE:
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%===================================================================================
%...................................................................................
Inegx = yyvar < 0;
%...................................................................................
yyvar(Inegx) = sqrt(eps);
%...................................................................................
Jnegx = find(yyvar < 0);
%...................................................................................
if ~isempty(Jnegx > 0)
    iTime
    xy_ave_var = [xave,xxvar]
    disp('Error!!! x_variance is negative!!!')
    pause 
end
%...................................................................................
%===================================================================================

%%%%%%%%%%%%%%%%%%%%%%%
%GAUSSIAN DISTRIBUTION:
%%%%%%%%%%%%%%%%%%%%%%%
%fyj = (1.0 ./ (sigmayj * sqrt(2*pi))) .* exp( -(yj - ymj).^2 ./ (2*sigmayj.^2) ); %Okay.
fyj = (1.0 ./ (sigmayj * sqrt(2*pi))); % since xj=xmj 

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%PHYTOPLANKTON BIOMASS GAUSSIAN DISTRIBUTION:
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Ptot = phy;
Pyj = Ptot .* fyj;
Pyjalfa = Pyj.^galfa;
    
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%ANALYTICAL INTEGRATION OF PHYTOPLANKTON GASSIAN DISTRUBUTION:
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%===================================================================================
%...................................................................................
intPyalfady = (Ptot.^galfa ./ sqrt(galfa)) .* (sigmayj*sqrt(2*pi)).^(1-galfa);
%...................................................................................
%===================================================================================

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%GRAZING FUNCTIONAL RESPONSE KTW:
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%===================================================================================
%...................................................................................
tempj = temp(:,jday);
Vmax = (gzmax*zoo).*(Q10h.^((tempj - temp0)/10));
Qswitchj = (Pyjalfa ./ intPyalfady);
Qfeeding = (Ptot.^gbeta ./ (Ptot.^gbeta + kgz^gbeta));
%...................................................................................
Gyj = Qswitchj .* Qfeeding .* Vmax;
%===================================================================================

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%BIOMASS SPECIFIC GRAZING FUNCTIONAL RESPONSE KTW:
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%...................................................................................
gyj = Gyj./Pyj; %[d-1] 
%...................................................................................

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%ANALYTICAL DERIVATIVES OF BIOMASS SPECIFIC GRAZING FUNCTIONAL RESPONSE KTW:
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%===================================================================================
%...................................................................................
% d1gxdx = gxj .* (galfa - 1) .* (-(xj - xmj) ./ sigmaxj.^2 ); 
d1gydy = 0; % Value at xj=xmj (Le Gland, 25/11/2019)
%...................................................................................
% d2gxdx = gxj .* (galfa - 1) .* ( (galfa - 1) .* (-(xj - xmj) ./ sigmaxj.^2).^2 - (1./sigmaxj.^2) );
d2gydydy = -gyj .* (galfa-1) ./ (sigmayj.^2); % Value at xj=xmj (Le Gland, 25/11/2019)
%...................................................................................
%===================================================================================

%%%%%%%%%%%%%%%%%%%%%
%TURBULENT DIFFUSION:
%%%%%%%%%%%%%%%%%%%%%
%===================================================================================
%...................................................................................
if ndepths > 1
kz  = KZ (:,jday);
end
%...................................................................................
%===================================================================================
%STATISTICAL MOMENTS:
if strcmp(keyPhysics,'yes')
    %...................................................................................
    DIFFyave_star  = zeros(ndepths,1);
    DIFFyyvar_star = zeros(ndepths,1);
    %...................................................................................
    if ndepths > 1
        [DIFFyave_star]  = SPEAD_1D_TurbulentDiffusion(yave_star,deltat,deltaz,kz,ndepths,'Implicit',100);
        [DIFFyyvar_star] = SPEAD_1D_TurbulentDiffusion(yyvar_star,deltat,deltaz,kz,ndepths,'Implicit',100);
    end
%...................................................................................
end
%===================================================================================
%PLANKTON BIOMASSES:
%...................................................................................
DIFFphy = zeros(ndepths,1);
DIFFzoo = zeros(ndepths,1);
DIFFdin = zeros(ndepths,1);
DIFFpon = zeros(ndepths,1);
%...................................................................................
%pon
if ndepths > 1
    [DIFFphy] = SPEAD_1D_TurbulentDiffusion(phy,deltat,deltaz,kz,ndepths,'Implicit',100);
    [DIFFzoo] = SPEAD_1D_TurbulentDiffusion(zoo,deltat,deltaz,kz,ndepths,'Implicit',100);
    [DIFFdin] = SPEAD_1D_TurbulentDiffusion(din,deltat,deltaz,kz,ndepths,'Implicit',100);
    [DIFFpon] = SPEAD_1D_TurbulentDiffusion(pon,deltat,deltaz,kz,ndepths,'Implicit',100);
end
%...................................................................................
%===================================================================================

%%%%%%%%%%%%%%%%%%
%VERTICAL SINKING:
%%%%%%%%%%%%%%%%%%
%========================================================================
%........................................................................
[ADVpon] = SPEAD_1D_SinkingAdvection(pon,deltaz,wsink,ndepths);
% Transform PON to DIN at bottom to avoid PON accumulation (Le Gland, 11/12/2019)
ADVdin = zeros(ndepths,1);
ADVdin(end) = (wsink/deltaz)*pon(end);
%........................................................................
%========================================================================

%%%%%%%
%LIGHT:
%%%%%%%
%========================================================================
%........................................................................
jpar0 = parz0(jday); %Photo. Active. Radiation at the surface [W*m-2]
%........................................................................
jPAR  = jpar0*exp(-kw*zdepths(:)); %[W*m-2] PAR profile.
%........................................................................
% Qpar = (jPAR / Isat).*exp(1 - (jPAR/Isat)); %Phy light limitation [n.d.] values between 0 and 1.
% Use normalized Follows (2007) formula, with photoinhibition of large cells
Kpar   = log(InhFac+1) / Isat;
Kinhib = Kpar / InhFac; 
Fmax   = (Kpar+Kinhib)/Kpar * exp( -(Kinhib/Kpar) * log(Kinhib/(Kpar+Kinhib)) );  
% Qpar is normalized to have a maximum of 1 at Isat
Qpar = Fmax * (1 - exp(-Kpar*jPAR)) .* exp(-Kinhib*jPAR);
%........................................................................
%========================================================================
%------------------------------------------------------------------------
%NOTE: To keep the same DIN trade-off, both "mup" and "alp" ** must ** be 
%multiplied by the environmental limitation factor (eg. Qpar or Qsst) 
%Otherwise, if Qpar or Qsst only multiplies "mup", the optimal size for a 
%given DIN value will shift up and down instead of remaining always at 
%the same ESDphy value. 
%------------------------------------------------------------------------
%........................................................................
% $$$ alp = alp0*ones(ndepths,1); 
% $$$ mup = mup0*ones(ndepths,1);
%........................................................................
alp = alp0*Qpar; 
mup = mup0*Qpar;
%........................................................................
%========================================================================

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%PHYTOPLANKTON NUTRIENT UPTAKE:
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%PHYTOPLANKTON GROWTH UPTAKE RATE MICHAELIS MENTEN FUNCTION:
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%===============================================================================
% New approach: kn is not fixed for all phenotypes but always equal to 
% the local DIN concentration (less arbitrary, but also less similar to other models)
qx = 1/2; % din / (din + din)
mu = mup .* sqrt(din);
%...............................................................................

% Skewed response to temperature (Le Gland, 23/10/2019)
q10 = Q10a.^((yj - temp0)/10); % (Le Gland, 04/11/2019)
if tempj < yj +5
    qyj = exp(0.2*(tempj - yj)) .* (yj + 5 - tempj)/5 .* q10;
else
    qyj = 0;
end

%............................................................................... 
uyj = mu .* qx .* qyj; % Uptke rate at mean size
%...............................................................................
%===============================================================================

% New skewed response to temperature (Le Gland, 23/10/2019)
if tempj < yj + 5 
    d1uydy = uyj .* ( - 0.2 + 1./(yj + 5 - tempj) + log(Q10a)/10 );
    d2uydydy = d1uydy .* ( - 0.2 + 1./(yj + 5 - tempj) + log(Q10a)/10 ) - uyj .* 1./(yj + 5 - tempj).^2;
else
    d1uydy = 0;
    d2uydydy = 0;
end

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%ORDINARY DIFFERENTIAL EQUATIONS (ODEs):
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%===================================================================================
%...................................................................................
uy = uyj + (1/2)*(sigmayj.^2).*d2uydydy; %Community upake rate gain.
%...................................................................................
%===================================================================================
%...................................................................................
gy = (1./phy) .* Qfeeding .* Vmax; %Community grazing rate loss [d-1] %OKAY (NOTE: Ptot = phy)
%...................................................................................
Fphy = uy .* phy; %Phy primary production [mmolN * m-3 * d-1]
Gphy = gy .* phy; %Phy grazing mortality [mmolN * m-3 * d-1]
Mphy = mp * phy .* (Q10h.^((tempj - temp0)/10)); % Temperature dependence on mortality (Le Gland, 11/11/2019)
%...................................................................................
Fzoo = Gphy; %Zoo second production [mmolN * m-3 * d-1]
Ezoo = (1-betaz) * Fzoo; %Zoo exudation [mmolN * m-3 * d-1] 
Mzoo = mz * (zoo.^mpower) .* (Q10h.^((tempj - temp0)/10)); % Temperature dependence on mortality (Le Gland, 11/11/2019)
%...................................................................................
% Temperature-dependent, based on heterotrophic Q10 (Le Gland, 04/11/2019)
mdt = md*Q10h.^((tempj-temp0)/10);
Mpon = mdt.*pon;
%...................................................................................
%>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
% $$$ disp('*** pto2 ***')
% $$$ % $$$ gxj,
% $$$ % $$$ (1/2)*(sigmaxj.^2).*(d2gxdx)
% $$$ gx 
% $$$ phy 
% $$$ Fzoo 
% $$$ pause
%<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
%===================================================================================
%-----------------------------------------------------------------------------------
% dsigma^2/dt = 2*sigma * dsigma/dt --> dsigma/dt = (1/(2*sigma)) * dsigma^2/dt
%-----------------------------------------------------------------------------------
%===================================================================================
%...................................................................................
dPHYdt =   Fphy - Gphy - Mphy; 
%...................................................................................
dZOOdt =   Fzoo - Ezoo - Mzoo; 
%...................................................................................
dDINdt = - Fphy + omePhy*Mphy + epsZoo*Ezoo + omeZoo*Mzoo + Mpon; 
%...................................................................................
dPONdt = (1-omePhy)*Mphy + (1-epsZoo)*Ezoo + (1-omeZoo)*Mzoo - Mpon;
%...................................................................................
%===================================================================================
%...................................................................................
dYAVEdt = yyvar .* (d1uydy - d1gydy);
%....................................................................................
dYYVARdt = (yyvar.^2) .* (d2uydydy - d2gydydy) + numuty .* (2.*uy); %
%................................................................................... 
%===================================================================================
%...................................................................................
FPHYToutcont(:,jcounter) = Fphy;
GPHYToutcont(:,jcounter) = Gphy;
MPHYToutcont(:,jcounter) = Mphy;
%...................................................................................
FZOOoutcont(:,jcounter) = Fzoo;
EZOOoutcont(:,jcounter) = Ezoo;
MZOOoutcont(:,jcounter) = Mzoo;
%...................................................................................
FDINoutcont(:,jcounter) = omePhy*Mphy + epsZoo*Ezoo + omeZoo*Mzoo + Mpon; 
FPONoutcont(:,jcounter) = (1-omePhy)*Mphy + (1-epsZoo)*Ezoo + (1-omeZoo)*Mzoo;
%...................................................................................
%===================================================================================
%................................................................................... 
if strcmp(keyPhysics,'yes')
    dYAVE_STARdt = (dPHYdt .* yave) + (dYAVEdt .* phy);
    dYYVAR_STARdt = (dPHYdt .* yyvar) + (dYYVARdt .* phy) + (dPHYdt .* yave .* yave) + 2*(dYAVEdt .* yave .* phy);
end
%...................................................................................
dBOXdt = dPHYdt + dZOOdt + dDINdt + dPONdt; %Virtual box to check mass conservation.
%...................................................................................
%===================================================================================

%%%%%%%%%%%%%%%%%%%%%%%%
%ADD PHYSICAL PROCESSES:
%%%%%%%%%%%%%%%%%%%%%%%%
%===================================================================================
%...................................................................................
phydot = dPHYdt + DIFFphy;
zoodot = dZOOdt + DIFFzoo;
dindot = dDINdt + DIFFdin + ADVdin; % Bottom remineralization (ADVdin)
pondot = dPONdt + DIFFpon + ADVpon; %Only PON has vertical sinking.
%...................................................................................
boxdot = dBOXdt; 
%...................................................................................
%===================================================================================
if strcmp(keyPhysics,'not')
    %...............................................................................
    yavedot  = dYAVEdt;
    yyvardot = dYYVARdt;
    %...............................................................................
% $$$     xavedot = dXAVEdt + DIFFxave;
% $$$     xvardot = dXVARdt + DIFFxvar;
% $$$     xstddot = dXSTDdt + DIFFxstd;
    %...............................................................................
% $$$     xavedot = dXAVEdt + DIFFxaveout(:,jcounter);
% $$$     xvardot = dXVARdt + DIFFxvarout(:,jcounter);
% $$$     xstddot = dXSTDdt + DIFFxstdout(:,jcounter);
    %...............................................................................
elseif strcmp(keyPhysics,'yes')
    %...............................................................................
    yave_stardot  = dYAVE_STARdt  + DIFFyave_star;
    yyvar_stardot = dYYVAR_STARdt + DIFFyyvar_star;
    %...............................................................................
end
%...................................................................................
%===================================================================================
%...................................................................................

%%%%%%%%%%
%STOCKAGE:
%%%%%%%%%%
%===================================================================================
%...................................................................................
todedotday(1,jday) = jday;
%...................................................................................
%Xavedotday(:,jday) = dXAVEdt;
%Xvardotday(:,jday) = dXVARdt;

%Xstddotday(:,jday) = dXSTDdt;
%...................................................................................
%d1UXdxday(:,jday) = d1uxdx;
%d1GXdxday(:,jday) = d1gxdx;
%...................................................................................
%d2UXdxday(:,jday) = d2uxdx;
%d2GXdxday(:,jday) = d2gxdx;
%...................................................................................
UYday(:,jday) = uy;
GYday(:,jday) = gy;
%...................................................................................
%===================================================================================
%...................................................................................
todedotout(1,jcounter) = jcounter*deltat;
%...................................................................................
%Xavedotout(:,jcounter) = dXAVEdt;
%Xvardotout(:,jcounter) = dXVARdt;
%Xstddotout(:,jcounter) = dXSTDdt;
%...................................................................................
%d1UXdxout(:,jcounter) = d1uxdx;
%d1GXdxout(:,jcounter) = d1gxdx;
%...................................................................................
%d2UXdxout(:,jcounter) = d2uxdx;
%d2GXdxout(:,jcounter) = d2gxdx;
%...................................................................................
%UXout(:,jcounter) = ux;
%GXout(:,jcounter) = gx;
%...................................................................................
%===================================================================================
%...................................................................................

%%%%%%%%
%OUTPUT:
%%%%%%%%
%===================================================================================
%...................................................................................
if strcmp(keyPhysics,'not')
    %...............................................................................
    Vdot = [phydot;zoodot;dindot;pondot;boxdot;yavedot;yyvardot];
    %...............................................................................
elseif strcmp(keyPhysics,'yes')
    %...............................................................................
    Vdot = [phydot;zoodot;dindot;pondot;boxdot;yave_stardot;yyvar_stardot];
    %...............................................................................
end

return
%...................................................................................
%===================================================================================
%***********************************************************************************
