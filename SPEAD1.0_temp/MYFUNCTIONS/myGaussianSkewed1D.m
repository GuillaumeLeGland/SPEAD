function [fx_star] = myGaussianSkewed1D(xaxis,xmean,xsigma,alfa)
%*************************************************************************
%Use: [fx_star] = myGaussianSkewed1D(xaxis,xmean,xsigma,alfa)
%
% xaxis  :: horizontal axis
% xmean  :: mean value 
% xsigma :: standar deviation
% alfa   :: skewness (negative or positive values; zero for centered gaussian)
%*************************************************************************
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%EXACT SOLUTION USING MATLAB BUILT-IN ALGORITHM FOR THE NORMCDF FUNCTION:
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%========================================================================
%------------------------------------------------------------------------
% <http://www.mathworks.com/matlabcentral/answers/250321-apply-a-skew-normal-distribution-to-a-normal-distribution>
%------------------------------------------------------------------------
%........................................................................
x = (xaxis - xmean) / xsigma;
%........................................................................
gaussian = @(x) (1/sqrt((2*pi))*exp(-x.^2/2));
%........................................................................
gaussian_skewed = @(x,alpha) 2*gaussian(x).*normcdf(alpha*x);
%........................................................................
fx_sym  = gaussian(x);
%........................................................................
fx_asym001 = gaussian_skewed(x,alfa);
%........................................................................
%========================================================================

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%EXACT SOLUTION USING MATLAB BUILT-IN ALGORITHM FOR THE ERROR FUNCTION:
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%========================================================================
%........................................................................
% $$$ % $$$ erfx  = erf (x/sqrt(2));
% $$$ % $$$ erfcx = erfc(x/sqrt(2));
% $$$ %........................................................................
% $$$ % $$$ cdf = (1/2) * (1.0 + erfx);
% $$$ % $$$ %%cdf = (1/2) * (1.0 + erfcx);
% $$$ %........................................................................
% $$$ cdf = (1/2) * (1.0 + erf((x*alfa)/sqrt(2)));
% $$$ %........................................................................
% $$$ pdf = (1/sqrt((2*pi))*exp(-x.^2/2));
%........................................................................
% $$$ fx_asym002 = 2 * (pdf .* cdf);
%........................................................................
%========================================================================

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%MY APPROXIMATION USING ELEMENTARY FUNCTIONS:
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%========================================================================
%------------------------------------------------------------------------
% <http://math.stackexchange.com/questions/321569/approximating-the-error-function-erf-by-analytical-functions>
%------------------------------------------------------------------------
%........................................................................
z = sqrt(pi)*log(2)*((x*alfa)/sqrt(2)); 
%........................................................................
tanhz = (exp(z) - exp(-z)) ./ (exp(z) + exp(-z)); 
%........................................................................
erfz = tanhz; %tanh(x) is an approx to the erf(x)
%........................................................................
%%erfz = (exp(z) - exp(-z)) ./ (exp(z) + exp(-z)); %tanh(x) is an approx to the erf(x)
%........................................................................
cdf = (1/2) * (1.0 + erfz);
%........................................................................
pdf = (1/sqrt((2*pi))*exp(-x.^2/2));
%........................................................................
fx_asym003 = 2 * (pdf .* cdf);
%........................................................................
%========================================================================

%%%%%%%%%
%OUTPUTS:
%%%%%%%%%
%========================================================================
%........................................................................
fx_asym = fx_asym001; %Exact solution. 
%........................................................................
%%fx_asym = fx_asym003; %Approximation using elementary functions. 
%........................................................................
fx_star = fx_asym / max(fx_asym);
%........................................................................
%========================================================================
%************************************************************************
return

x = [-10:0.1:+10];
gaussian = @(x) (1/sqrt((2*pi))*exp(-x.^2/2))
gaussian_skewed = @(x,alpha) 2*gaussian(x).*normcdf(alpha*x)

figure(2)
plot(x, gaussian(x), '.k-')
hold on
plot(x, gaussian_skewed(x,+4),'.b--')
plot(x, gaussian_skewed(x,+1),'.b-')
plot(x, gaussian_skewed(x,.0),'.y--')
plot(x, gaussian_skewed(x,-1),'.r-')
plot(x, gaussian_skewed(x,-4),'.r--')
grid on

