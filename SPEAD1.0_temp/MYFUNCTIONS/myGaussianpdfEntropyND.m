function [GaussianEntropyNumericalND,GaussianEntropyTheoreticalND] = myGaussianpdfEntropyND(varargin)

%***************************************************************************
%Use: function [] = myGaussianpdfEntropyND(xave,xsig,yave,ysig,zave,zsig,...,nave,nsig)
%
%---------------------------------------------------------------------------
% <https://en.wikipedia.org/wiki/Multivariate_normal_distribution> (see Entropy)
% <https://en.wikipedia.org/wiki/Multivariate_normal_distribution> 
% <https://en.wikipedia.org/wiki/Differential_entropy> 
% 
% Entropy absnormal ND:
%---------------------------------------------------------------------------
% H = (1/2) * log((2*pi*exp(1))^(ndim)*det(xcov)) %OKAY.
%---------------------------------------------------------------------------
% H = (ndim/2) * (1 + log(2*pi)) + (1/2)*log(det(xcov)) %OKAY.
%---------------------------------------------------------------------------
% H = (ndim/2) * log((2*pi)*exp(1)*(det(xcov))).^(1/ndim) %WRONG
%---------------------------------------------------------------------------
% H = (ndim/2) * ln((2*pi)*exp(1)*(sigmax^2 * sigmay^2 * ... * sigman^2))^(1/ndim)  %WRONG
%---------------------------------------------------------------------------
%***************************************************************************
%===========================================================================
%...........................................................................
groups = 2; %pairs of data in varargin [mean,sigma]
nlen = length(varargin);
ndim = nlen/groups; 
xcov = zeros(ndim,ndim);
%...........................................................................
xnbins = 64;
ynbins = 64;
znbins = 64;
%...........................................................................
%===========================================================================
%...........................................................................
j = 0;
%...........................................................................
for index = [1:groups:nlen] 
    %=======================================================================
    %.......................................................................
    j = j + 1; 
    %.......................................................................
    jxave = varargin{index}; 
    jxsig = varargin{index+1}; 
    jxvar = jxsig.^2;
    %.......................................................................
    xave(j)   = jxave;  %Vector of elements with the MEAN of all normal distributions-j
    xcov(j,j) = jxvar;  %Array of diagonal elements with the VARIANCE of all normal distributions-j 
    %.......................................................................
    %=======================================================================
    %.......................................................................
    jxmin = jxave - 3*jxsig;
    jxmax = jxave + 3*jxsig;
    %.......................................................................
    jxdel = ((jxmax-jxmin)/(xnbins-1)); 
    %.......................................................................
    jxaxis = [jxmin:jxdel:jxmax];
    %.......................................................................
    xaxis(:,j) = jxaxis(:); %Array with the n-axes as column vectors.
    %.......................................................................
    xdel(j,j) = jxdel; %Array of diagonal elements with the DX of each axis.
    %.......................................................................
    %=======================================================================
end
%...........................................................................
GaussianEntropyTheoreticalND001 = (ndim/2) * (1 + log(2*pi)) + (1/2)*log(det(xcov)); %Exact solution.
%...........................................................................
GaussianEntropyTheoreticalND002 = (1/2) * log((2*pi*exp(1))^(ndim)*det(xcov)); %Exact solution.
%...........................................................................
GaussianEntropyTheoreticalND = GaussianEntropyTheoreticalND001; %OKAY.
% $$$ GaussianEntropyTheoreticalND = GaussianEntropyTheoreticalND002; %OKAY.
%...........................................................................
%===========================================================================
%...........................................................................
if ndim == 2
    %.......................................................................
    xrange = xaxis(:,1); %NOPT
    yrange = xaxis(:,2); %TOPT
    %.......................................................................
    xdiff = diff(xrange);
    ydiff = diff(yrange);
    %.......................................................................
    dx = xdiff(1);
    dy = ydiff(1);
    %.......................................................................
    xmax = max(xrange);
    xmin = min(xrange);
    %.......................................................................
    ymax = max(yrange);
    ymin = min(yrange);
    %.......................................................................
    xmean = xave(1);
    ymean = xave(2);
    %.......................................................................
    xsigma = sqrt(xcov(1,1));
    ysigma = sqrt(xcov(2,2));
    %.......................................................................
    [XRANGE,YRANGE] = ndgrid(xrange,yrange); %Transposed orientation of MESHGRID.
    %.......................................................................
    Axy = 1 / (sqrt((2*pi)^ndim*det(xcov)));
    %.......................................................................
    Bx = (XRANGE-xmean).^2 / (2*xsigma^2);
    By = (YRANGE-ymean).^2 / (2*ysigma^2);
    %.......................................................................
    FXY = Axy * exp(-(Bx + By)); 
    %.......................................................................
    [sumFXYdxdy] = myintegralpdf2D(FXY,xmax,xmin,ymax,ymin,xnbins,ynbins); %Should be equal to one!
    %.......................................................................
% $$$     figure(10)
% $$$     mypcolor(XRANGE,YRANGE,FXY)
% $$$     colorbar 
    %.......................................................................
    FXYlogFXYdxdy = - FXY .* log(FXY) * det(xdel);
    %.......................................................................
    GaussianEntropyNumericalND = sum(FXYlogFXYdxdy(:)); %Numerical approximation.
    %.......................................................................
end
%...........................................................................
%===========================================================================
%...........................................................................
if ndim == 3
    %.......................................................................
    xrange = xaxis(:,1); %NOPT
    yrange = xaxis(:,2); %TOPT
    zrange = xaxis(:,2); %IOPT
    %.......................................................................
    xdiff = diff(xrange);
    ydiff = diff(yrange);
    zdiff = diff(zrange);
    %.......................................................................
    dx = xdiff(1);
    dy = ydiff(1);
    dz = zdiff(1);
    %.......................................................................
    xmax = max(xrange);
    xmin = min(xrange);
    %.......................................................................
    ymax = max(yrange);
    ymin = min(yrange);
    %.......................................................................
    zmax = max(zrange);
    zmin = min(zrange);
    %.......................................................................
    xmean = xave(1);
    ymean = xave(2);
    zmean = xave(2);
    %.......................................................................
    xsigma = sqrt(xcov(1,1));
    ysigma = sqrt(xcov(2,2));
    zsigma = sqrt(xcov(2,2));
    %.......................................................................
    [XRANGE,YRANGE,ZRANGE] = ndgrid(xrange,yrange,zrange); 
    %.......................................................................
    Axyz = 1 / (sqrt((2*pi)^ndim*det(xcov)));
    %.......................................................................
    Bx = (XRANGE-xmean).^2 / (2*xsigma^2);
    By = (YRANGE-ymean).^2 / (2*ysigma^2);
    Bz = (ZRANGE-zmean).^2 / (2*zsigma^2);
    %.......................................................................
    FXYZ = Axyz * exp(-(Bx + By + Bz)); 
    %.......................................................................
    [sumFXYZdxdydz] = myintegralpdf3D(FXYZ,xmax,xmin,ymax,ymin,zmax,zmin,xnbins,ynbins,znbins); %Should be equal to one!
    %.......................................................................
    FXYZlogFXYZdxdydz = - FXYZ .* log(FXYZ) * det(xdel);
    %.......................................................................
    GaussianEntropyNumericalND = sum(FXYZlogFXYZdxdydz(:)); %Numerical approximation.
    %.......................................................................
end
%...........................................................................
%===========================================================================
%***************************************************************************
return
