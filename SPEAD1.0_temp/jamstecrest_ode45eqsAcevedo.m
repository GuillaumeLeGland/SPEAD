function [Vdot] = jamstecrest_gaussecomodel_ode45eqsAcevedo(iTime,V0)
global t0 deltat ndays nyear tmax tspan 
global zdepths ndepths deltaz
global Iave Ivar Istd %continuous model
global Iphy Izoo Idin Ipon Ibox %continuous model
global KZ KZI
global parz0
global kw kp wsink
global ntot0 %continuous model

%%%%%%%%%%%%%%%%%
%STATE VARIABLES:
%%%%%%%%%%%%%%%%%
%===================================================================================
%...................................................................................
phy  = V0(Iphy);
zoo  = V0(Izoo);
din  = V0(Idin);
pon  = V0(Ipon);
box  = V0(Ibox);
%...................................................................................
%===================================================================================
%...................................................................................
xave = V0(Iave); %mean size
xvar = V0(Ivar); %variance
xstd = V0(Istd); %deviation
%...................................................................................
% $$$ xave_star = V0(Iave); %mean size times phy.
% $$$ xvar_star = V0(Ivar); %variance times phy.
% $$$ xstd_star = V0(Istd); %deviation times phy.
% $$$ %...................................................................................
% $$$ xave = (xave_star./phy); %mean size
% $$$ xvar = (xvar_star./phy); %variance
% $$$ xstd = (xstd_star./phy); %deviation
%...................................................................................
%===================================================================================
%................................................................................... 
VNPZD0 = [phy;zoo;din;pon]; 
%...................................................................................
VSTAT0 = [xave;xvar;xstd]; 
%................................................................................... 
%===================================================================================
%................................................................................... 
jday = ceil(iTime); %current day. 
%...................................................................................
jcounter = floor(iTime/deltat); %time index counter. 
%...................................................................................
%===================================================================================
%...................................................................................
P = phy; 
Z = zoo; 
N = din; 
D = pon; 
%...................................................................................
L = xave; 
V = xvar; 
S = xstd; 
%...................................................................................
% $$$ PL = xave_star;
% $$$ PV = xvar_star;
% $$$ PS = xstd_star;
%...................................................................................
%===================================================================================
% $$$ %...................................................................................
% $$$ showCONCS = [iTime,N(1),P(1),Z(1),D(1),PL(1),PV(1),PS(1)] 
% $$$ %...................................................................................
% $$$ %%showCONCS = [iTime,N(1),P(1),Z(1),D(1),L(1),V(1),S(1)] 
% $$$ %%showCONCS = [N,P,Z,D,L,V,S] 
% $$$ %...................................................................................
%===================================================================================

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%CHECK FOR NEGATIVE CONCENTRATIONS:
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%========================================================================
%........................................................................
Ineg = find(VNPZD0 < 0);
%........................................................................
if length(Ineg > 0)
    iTime
    disp(['P , Z , N , D']);
    wconcs = [phy,zoo,din,pon]
    wconcsNeg = VNPZD0(Ineg);
    disp('Error!!! there are NEGATIVE concentrations!')
    pause
end
%........................................................................
%========================================================================

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%TURBULENT DIFFUSION OF STATISTICAL MOMENTS (MEAN AND VARIANCE):
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%===================================================================================
%...................................................................................
kz  = KZ (:,jday);
kzI = KZI(:,jday);
%...................................................................................
%===================================================================================

%%%%%%%%%%%%%%%%%%%
%MASS CONSERVATION:
%%%%%%%%%%%%%%%%%%%
%===================================================================================
%...................................................................................
ntoti = sum([phy + zoo + din + pon + box]); %Checking mass conservation.
%...................................................................................
ydistmax = 1d-3;
ydist = abs(ntoti - ntot0);
%...................................................................................
if abs(ydist) > ydistmax 
    masscheck_N = [iTime,jday,ntot0,ntoti,ydist]
    disp('Error!!! mass is NOT conserved!')
    pause
end 
%...................................................................................
if mod(iTime,10) == 0 %show every 10 days %USAR ESTE!!!!
    masscheck = [iTime,jday,ntot0,ntoti,ydist]
end
%...................................................................................
%===================================================================================

%%%%%%%%%%%%%%%%%%%%%%%%
%RENAME STATE VARIABLES:
%%%%%%%%%%%%%%%%%%%%%%%%
%===================================================================================
%...................................................................................
fcPAR = 2.5; %conversion factor from [einstein*m-2*d-1] to [W*m-2] for 400-700nm (PAR)
%...................................................................................
alphaU =  0.81; %Slope of Kn allometric function (mmol*m-3*um-1) 
alphaG = -0.75; %Slope for allometric grazer preference (n.d.) 
Iopt = 30.0*fcPAR;  %Optimum irradiance (W*m-2) 
kdin = 0.14275; 
kp = 0.1; %Prey half-saturation constant (mmol*m-3)
%%kw = 0.1; %light attenuation constant (m-1)
kw = 0.04; %irradiance attenutation due to water [m-1]
alphav = 1.17; %Slope of Sinking allometric function (m * d-1 * [um]-1) 
betav = 0.01989; %Intercept of Sinking allometric function (m * d-1)
betaU = 0.14275; %Intercept of Kn allometric function (mmol * m-3)
%...................................................................................
muZ = 1.1; %Maximum grazing rate (d-1)
muP = 1.4; %Phytoplankton max growth rate (d-1)
%...................................................................................
moP = 0.05; %Phytoplankton mortality rate (d-1)
moZ = 0.30; %Zooplankton mortality rate (m3 * mmol-1 * d-1)
%...................................................................................
deltaZ = 0.30; %Prey assimilation coefficient (n.d.)
deltaD = 0.10; %mineralization rate (d-1)
deltaI = 0.008; %Immigration rate (d-1)
%...................................................................................
m3 = 0;
m4 = 3;
%...................................................................................
%===================================================================================
%...................................................................................
smin = 0.2;  %min size (ESD in micro m)
smax = 50.0; %max size (ESD in micro m)
%...................................................................................
s_mea0 = (smin+smax)/2; %Initial mean size (rename s_mean0 --> s_mea0 amhc)
s_va0 = 500; %Size variance of the immigrating community (rename s_var0 --> s_va0 amhc)
%...................................................................................
lns_mean0 = log(s_mea0 / sqrt( (s_va0/s_mea0^2) + 1.0) ); 
lns_var0  = log(s_va0 / s_mea0^2 + 1.0); 
%...................................................................................
s_mean0 = lns_mean0; %Initial mean size.
s_var0 = lns_var0; 
%...................................................................................
%===================================================================================
%...................................................................................
%%jSST = SST(:,jday); 
%...................................................................................
jpar0 = parz0(jday); %Photo. Active. Radiation at the surface [W*m-2]
%...................................................................................
jPAR  = jpar0*exp(-kw*zdepths(:)); %[W*m-2] PAR profile.
%...................................................................................
%===================================================================================

%%%%%%%%%%%%%
%MODEL TERMS:
%%%%%%%%%%%%%
%===================================================================================
%...................................................................................
%Immigration
Im = (deltaI * P); 
% $$$ Im = 0.00 * (deltaI * P); 
%...................................................................................
%Edible phytoplankton: 
Ped = P .* (exp(L).^alphaG + 0.5 * V .* alphaG^2 .* exp(L).^alphaG); %(mmol*m-3) x (m) 
%...................................................................................
%Nutrient uptake:
Nu = N ./ (N + kdin*exp(L).^0.81); %[n.d.] 
%...................................................................................
%Light harvesting: 
Ir = (jPAR/Iopt) .* exp(1.0 - jPAR/Iopt); %[n.d.]
%...................................................................................
%Temperature depth growth:
%%Te = exp(0.063*jSST); 
Te = 1.0; %[n.d.] 
%...................................................................................
%Grazing:
Gr = exp(L).^alphaG ./ (Ped + kp); %(m3 * mmol-1)
%...................................................................................
%Sinking: Psi
%%wphy = (betav*exp(L).^alphav);  %Stokes' law with declining cell densities (m * d-1) units???
wphy = 0;
%...................................................................................
%Derivatives for the growth componentes of phytoplankton
tt0 = muP * Ir .* Te; %[d-1] 
tt2 = muZ * Z; %[d-1] x [mmol * m-3]
%...................................................................................
%Derivatives for size-dependent Nutrient Uptake   
d1r0 = -N .* tt0 * betaU * alphaU .* exp(L).^alphaU ./ (N + betaU*exp(L).^alphaU).^2; 
a1   =  N .* tt0 * betaU * alphaU^2; 
a2   = (2*betaU * exp(L).^alphaU ./ (N + betaU *exp(L).^alphaU) - 1); 
a3 =  (exp(L).^alphaU) ./ ((N + betaU *exp(L).^alphaU).^2);
d2r0 = a1.*a2.*a3;
%...................................................................................
%Derivatives for size-dependent Grazing: 
d1r2 = tt2 .* (alphaG)   .* (exp(L).^alphaG) ./ (Ped + kp); 
d2r2 = tt2 .* (alphaG^2) .* (exp(L).^alphaG) ./ (Ped + kp); 
%...................................................................................
%Final derivatives: 
d1 = d1r0 - d1r2;
d2 = d2r0 - d2r2; 
%...................................................................................
E  = 0.5 * V .* d2; 
EN = 0.5 * V .* d2r0;
EZ = 0.5 * V .* d2r2;
ED = (1-deltaZ) * 0.5 * V .* d2r2 .* P;
Lmean = L; 
%...................................................................................
%===================================================================================
%Calculation of state variables:
%...................................................................................
%Nutrients 
dModelStateN = -P .* (muP * Nu .* Ir .* Te + EN) + deltaD*D;
%...................................................................................
% dP/dt Phytoplankton
dModelStateP =  P .* (muP * Nu .* Ir .* Te - moP - muZ * Gr .* Z + E) + Im;
%...................................................................................
% dZ/dt Zooplankton
dModelStateZ = deltaZ * P .* (muZ * Gr .* Z + EZ)- moZ*Z.^2;
%...................................................................................
% dD/dt Detritus
dModelStateD = P .* (moP + (1-deltaZ) * muZ * Gr .* Z) + ED + moZ*Z.^2 - deltaD*D;
%...................................................................................
%Desd/dt 
dModelStateL = V .* d1; %+ m3*0.5*d2  + Im ./ P .* (smean - L);
%...................................................................................
%dvar/dt
dModelStateV = 0.5*(m4-1) * (V.^2 .* d2) + Im ./ P .* ((s_var0-V) + (Lmean - L).^2);
%...................................................................................
%dstd/dt
dModelStateS = (1./(2*S)) .* dModelStateV; 
%...................................................................................
%===================================================================================
%...................................................................................
% $$$ dPLdt = (dModelStateP .* L) + (dModelStateL .* P);
% $$$ dPVdt = (dModelStateP .* V) + (dModelStateV .* P);
% $$$ dPSdt = (dModelStateP .* S) + (dModelStateS .* P);
%...................................................................................
%===================================================================================
%>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
% $$$ showODES = [dModelStateN,dModelStateP,dModelStateZ,dModelStateD,dModelStateL,dModelStateV,dModelStateS]; 
%...................................................................................
% $$$ pause 
%<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

%%%%%%%%%%%%%%%%%%%%%
%TURBULENT DIFFUSION:
%%%%%%%%%%%%%%%%%%%%%
%===================================================================================
%...................................................................................
[DIFFphy] = jamstecrest_TurbulentDiffusion(P,deltaz,kz,kzI,ndepths,'Reflectante');
[DIFFzoo] = jamstecrest_TurbulentDiffusion(Z,deltaz,kz,kzI,ndepths,'Reflectante');
[DIFFdin] = jamstecrest_TurbulentDiffusion(N,deltaz,kz,kzI,ndepths,'Reflectante');
[DIFFpon] = jamstecrest_TurbulentDiffusion(D,deltaz,kz,kzI,ndepths,'Reflectante');
%...................................................................................
% $$$ [DIFFpl] = jamstecrest_TurbulentDiffusion(PL,deltaz,kz,kzI,ndepths,'Reflectante');
% $$$ [DIFFpv] = jamstecrest_TurbulentDiffusion(PV,deltaz,kz,kzI,ndepths,'Reflectante');
% $$$ [DIFFps] = jamstecrest_TurbulentDiffusion(PS,deltaz,kz,kzI,ndepths,'Reflectante');
%...................................................................................
%===================================================================================
%...................................................................................
[ADVpon] = jamstecrest_SinkingAdvection(D,deltaz,wsink,ndepths);
%...................................................................................
%===================================================================================

%%%%%%%%%%%%%%%%%%%%%%%%
%ADD PHYSICAL PROCESSES:
%%%%%%%%%%%%%%%%%%%%%%%%
%===================================================================================
%...................................................................................
% $$$ phydot = dModelStateP;
% $$$ zoodot = dModelStateZ;
% $$$ dindot = dModelStateN;
% $$$ pondot = dModelStateD;
% $$$ %...................................................................................
% $$$ Ldot = dModelStateL;
% $$$ Vdot = dModelStateV;
% $$$ Sdot = dModelStateS;
% $$$ %...................................................................................
% $$$ boxdot = -Im;  
% $$$ %...................................................................................
%===================================================================================
%...................................................................................
phydot = dModelStateP + DIFFphy;
zoodot = dModelStateZ + DIFFzoo;
dindot = dModelStateN + DIFFdin;
pondot = dModelStateD + DIFFpon + ADVpon;
%...................................................................................
Ldot = dModelStateL;
Vdot = dModelStateV;
Sdot = dModelStateS;
%...................................................................................
boxdot = -Im;  
%...................................................................................
%===================================================================================
% $$$ %...................................................................................
% $$$ phydot = dModelStateP;
% $$$ zoodot = dModelStateZ;
% $$$ dindot = dModelStateN;
% $$$ pondot = dModelStateD;
% $$$ %...................................................................................
% $$$ pldot = dPLdt;
% $$$ pvdot = dPVdt;
% $$$ psdot = dPSdt;
% $$$ %...................................................................................
% $$$ boxdot = -Im;  
% $$$ %...................................................................................
%===================================================================================
%...................................................................................
% $$$ phydot = dModelStateP + DIFFphy;
% $$$ zoodot = dModelStateZ + DIFFzoo;
% $$$ dindot = dModelStateN + DIFFdin;
% $$$ pondot = dModelStateD + DIFFpon;
% $$$ % $$$ pondot = dModelStateD + DIFFpon + ADVpon;
% $$$ %...................................................................................
% $$$ pldot = dPLdt;
% $$$ pvdot = dPVdt;
% $$$ psdot = dPSdt;
% $$$ %...................................................................................
% $$$ boxdot = -Im;  
% $$$ %...................................................................................
%===================================================================================
%...................................................................................
% $$$ phydot = dModelStateP + DIFFphy;
% $$$ zoodot = dModelStateZ + DIFFzoo;
% $$$ dindot = dModelStateN + DIFFdin;
% $$$ pondot = dModelStateD + DIFFpon + ADVpon;
% $$$ %...................................................................................
% $$$ pldot = dPLdt + DIFFpl;
% $$$ pvdot = dPVdt + DIFFpv;
% $$$ psdot = dPSdt + DIFFps;
% $$$ %...................................................................................
% $$$ boxdot = -Im;  
%...................................................................................
%===================================================================================

%%%%%%%%
%OUTPUT:
%%%%%%%%
%===================================================================================
%...................................................................................
Vdot = [Ldot;Vdot;Sdot;phydot;zoodot;dindot;pondot;boxdot];
%...................................................................................
% $$$ Vdot = [pldot;pvdot;psdot;phydot;zoodot;dindot;pondot;boxdot];
%...................................................................................
%===================================================================================
%***********************************************************************************
return
