%====================================================================
%....................................................................
close all
clear all
format short g 
%....................................................................
OnePath001 = '~/SERVAL/SER24/PROGRAMMING/MATLAB/PROGRAMAS/MYFUNCTIONS/';
GenPath001 = genpath('~/SERVAL/SER24/PROGRAMMING/MATLAB/PROGRAMAS/MYTOOLBOX/');
%....................................................................
addpath(OnePath001)
addpath(GenPath001)
%....................................................................
%====================================================================
global t0 deltat ndays nyear tmax tspan 
global zdepths ndepths deltaz
global Iave Ivar Istd %continuous model
global Iphy Izoo Idin Ipon Ibox %continuous model
global KZ KZI
global parz0
global kw kp wsink
global ntot0 %continuous model
%....................................................................
%====================================================================

%%%%%%%%%%%%%%%%%%%%%
%TEMPORAL RESOLUTION:
%%%%%%%%%%%%%%%%%%%%%
%====================================================================
%........................................................................
deltat = 3/24; %[days] %USAR ESTE!!!
t0 = deltat;
%........................................................................
ndays = 360; %For months of 30 days (when using seasonal runs). 
%........................................................................
nyear = 3; 
%........................................................................
tmax = ndays*nyear; 
tspan = [t0:deltat:tmax]; 
%........................................................................
nsteps = length(tspan); 
%........................................................................
%========================================================================
%........................................................................
zmin = 0.0; 
deltaz = 10.0; %[m] (needs dt < 0.25)
zmax = 200; %[m] (for seasonal 1D or KTW galfa 1D)
%........................................................................
zdepths = [zmin:deltaz:zmax-deltaz]; %all nodes.
ndepths = length(zdepths); %number of vertical nodes.
%........................................................................
%========================================================================

%%%%%%%%%%%%%%%%%%%
%EXTERNAL FORCINGS:
%%%%%%%%%%%%%%%%%%%
%========================================================================
%PHOTOSYNTHETIC ACTIVE RADIATION (PAR+):
%........................................................................
ttmax = ndays; %[days]
%........................................................................
parmin =  20.00; %winter [W*m-2]
parmax = 120.00; %summer [W*m-2]
%........................................................................
[iparz0] = jamstecrest_SinusoidalFunction(parmin,parmax,ndays,ttmax,'Linear'); %Seasonal PAR.
%........................................................................
%========================================================================
%MIXED LAYER DEPTH (MLD):
%........................................................................
ttmax = ndays; %[days]
%........................................................................
% $$$ mldmin =  15.0; %min MLD [m]
% $$$ mldmax = 150.0; %max MLD [m]
%........................................................................
mldmin =  20.0; %min MLD [m]
mldmax = 200.0; %max MLD [m]
%........................................................................
[imld] = jamstecrest_SinusoidalFunction(mldmax,mldmin,ndays,ttmax,'Quadratic');
%........................................................................
%========================================================================
%SURFACE TURBULENCE DIFFUSION (SKZ):
%........................................................................
skzmin =  30; %min surface turbulence [m^2*day-1] %for "m4cMIT-v055.m" setup
skzmax = 300; %max surface turbulence [m^2*day-1]
%........................................................................
iskz = skzmax - (skzmax-skzmin)*((mldmax-imld)./(mldmax-mldmin)); %skz is a function of the MLD.
%........................................................................
%========================================================================
%TURBULENCE DIFFUSION PROFILES AT THE NODES j (KZ):
%........................................................................
[iKZ] = jamstecrest_KZdiffprofiles(ndays,zmax,deltaz,imld,iskz); %2o KZ.
%........................................................................
%========================================================================
%KZ AT MID-POINT BETWEEN NODES j-1/2 or j+1/2 (KZI):
%........................................................................
x = [1:ndays]; %original time grid nodes.
z = zdepths; %original depth grid nodes.
%........................................................................
xI = [1:ndays]; %interpolated time grid nodes.
zI = [z(1)+0.5*deltaz:deltaz:z(end)-0.5*deltaz]; %interpolated depth grid nodes.
%........................................................................
[X ,Z ] = meshgrid(x ,z ); %convert to 2D original grids.
[XI,ZI] = meshgrid(xI,zI); %convert to 2D interpolated grids.
%........................................................................
iKZI = interp2(X,Z,iKZ,XI,ZI); %linear interpolation of KZ values between nodes.
%........................................................................
%========================================================================

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%MAKE LONGER ARRAYS (mld, par, KZ, KZI) ACCORDING TO NUMBER OF YEARS:
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%========================================================================
%........................................................................
KZ  = [];
KZI = [];
mld = [];
parz0 = []; 
%........................................................................
for iyear = 1:nyear 
    KZ  = [KZ, iKZ ];
    KZI = [KZI,iKZI];
    mld = [mld,imld];
    parz0 = [parz0,iparz0];
end
%........................................................................
%========================================================================

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%STABILITY CONDITION FOR TURBULENCE SCHEME: 
%(not really relevant when using "ode45" solver 
% because it uses a variable adaptive dt)
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%========================================================================
%--------------------------------------
% dtdiff < min(dz^2/(2*kzI))
%--------------------------------------
%........................................................................
wsink = 1.0; %[m*d-1]
%........................................................................
maxKZ = max(KZI);
stability = min(deltaz^2./(2*maxKZ)) %This defines the maxmimum dt allowed.
%........................................................................
if (deltat*2) >= stability 
    disp('Be careful: Codition of stability violated!')
    disp('reduce dt or increase dz')
end
%........................................................................
dtadv = min((deltaz^2)./((wsink*deltaz) + (2*maxKZ))); %max time step from von Neumann stability analysis
%........................................................................
%========================================================================

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%INITIAL CONDITIONS FOR THE CONTINOUS TRAIT MODEL:
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%========================================================================
%........................................................................
ESDave = 5.00; 
ESDmin = 0.50; 
ESDmax = 50.0; 
%........................................................................
xave0 = log(ESDave); %Phy diameter average [log(um)]
xstd0 = 0.1*(log(ESDmax) - log(ESDmin));
xvar0 = (xstd0)^2; %Phy diameter variance [log(um)^2]
%........................................................................
phy0 = 1.0; %Phy [mmolN*m-3]
zoo0 = 1.0; %Zoo [mmolN*m-3]
din0 = 1.0; %DIN [mmolN*m-3]
pon0 = 0.0; %PON [mmolN*m-3]
box0 = 0.0; %BOX [mmolN*m-3]
%........................................................................
%========================================================================
%CONSTANT VERTICAL PROFILES OF THE INITIAL CONDITIONS:
%........................................................................
vdepths=ones(ndepths,1); %column vector of ones with ndepths vertical nodes.
%........................................................................
PDFave0 = xave0*vdepths;
PDFvar0 = xvar0*vdepths;
PDFstd0 = xstd0*vdepths;
%........................................................................
PHY0 = phy0*vdepths; %column vector with I.C. for Phy (ndepths vertical nodes).
ZOO0 = zoo0*vdepths; %column vector with I.C. for Zoo (ndepths vertical nodes).
DIN0 = din0*vdepths; %column vector with I.C. for Nut (ndepths vertical nodes).
PON0 = pon0*vdepths; %column vector with I.C. for Det (ndepths vertical nodes).
BOX0 = box0*vdepths; %column vector with I.C. for Det (ndepths vertical nodes).
%........................................................................
%========================================================================
%COLUMN VECTOR OF INITIAL CONDITIONS:
%........................................................................
PDF = [PDFave0,PDFvar0,PDFstd0]; %Statistics of Phy size-distribution.
%........................................................................
BIO = [PHY0,ZOO0,DIN0,PON0,BOX0]; %Biomasses of plankton and nutrients.
%........................................................................
V0 = []; %Initalize vector.
%........................................................................
PDFV0 = PDF(:);
%........................................................................
BIOV0 = BIO(:);
%........................................................................
V0 = [PDFV0;BIOV0]; %column vector with all intitial conditions.
%........................................................................
ntot0 = sum(BIOV0(:)); %initial total mass [mmolN*m-3]
%........................................................................
%========================================================================

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%DEFINE THE ROWS CORRESPONDING TO EACH STATE-VARIABLE:
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%========================================================================
%------------------------------------------------------------------------
%[NOTE: Iphy, Izoo, Idin, Ipom]
%------------------------------------------------------------------------
%........................................................................
mlength = length(PDFV0);
%........................................................................
Iave = [1:ndepths];
Ivar = [(ndepths*1)+1:(ndepths*2)];
Istd = [(ndepths*2)+1:(ndepths*3)];
%........................................................................
Iphy = mlength + [1:ndepths];
Izoo = mlength + [(ndepths*1)+1:(ndepths*2)];
Idin = mlength + [(ndepths*2)+1:(ndepths*3)];
Ipon = mlength + [(ndepths*3)+1:(ndepths*4)];
Ibox = mlength + [(ndepths*4)+1:(ndepths*5)];
%........................................................................
%========================================================================

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%RUNGE-KUTTA ODE45 SOLVER FOR CONTINOUS TRAIT MODEL:
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%===================================================================================
%...................................................................................
display('*** continouse model ode45 Acevedo solving starts ***')
%...................................................................................
Voutcont = zeros(length(tspan),length(V0));
%...................................................................................
ode45options = odeset('AbsTol',1e-12,'RelTol',1e-6);
%...................................................................................
[Voutcont] = ode4(@jamstecrest_ode45eqsAcevedo,tspan,V0);
%...................................................................................
% $$$ [~,Voutcont] = ode45(@jamstecrest_gaussecomodel1D_ode45eqsAcevedo,tspan,V0,ode45options);
%...................................................................................
Voutcont = Voutcont'; %Continous Based Model (continous).
%...................................................................................
display('*** continouse model ode45 Acevedo solving ends ***')
%...................................................................................
%===================================================================================
%GET DAILY AVERAGES:
%...................................................................................
[Vodecont,todecont] = jamstecrest_dailyAve(Voutcont,deltat);
%...................................................................................
%===================================================================================
%...................................................................................
PHYTodecont = Vodecont(Iphy,:);
ZOOodecont = Vodecont(Izoo,:);
DINodecont = Vodecont(Idin,:);
PONodecont = Vodecont(Ipon,:);
%...................................................................................
XAVEodecont = Vodecont(Iave,:);
XVARodecont = Vodecont(Ivar,:);
XSTDodecont = Vodecont(Istd,:);
%...................................................................................
%===================================================================================
%...................................................................................
deltaday = 1;
%...................................................................................
Jdays = [(ndays/deltaday)*(nyear-1)+1:(ndays/deltaday)*nyear]; %Last year days (ie. from day 721 until day 1080)
%...................................................................................
PHYTsspcont = PHYTodecont(:,Jdays);
ZOOsspcont = ZOOodecont(:,Jdays);
DINsspcont = DINodecont(:,Jdays);
PONsspcont = PONodecont(:,Jdays);
%...................................................................................
XAVEsspcont = XAVEodecont(:,Jdays);
XVARsspcont = XVARodecont(:,Jdays);
XSTDsspcont = XSTDodecont(:,Jdays);
%...................................................................................
%===================================================================================
figure(10)
subplot(2,2,1)
imagesc(PHYTsspcont)
mycolorbar('horiz')
title('PHY')
subplot(2,2,2)
imagesc(ZOOsspcont)
mycolorbar('horiz')
title('ZOO')
subplot(2,2,3)
imagesc(DINsspcont)
mycolorbar('horiz')
title('DIN')
subplot(2,2,4)
imagesc(PONsspcont)
mycolorbar('horiz')
title('PON')
%...................................................................................
figure(20)
subplot(2,2,1)
imagesc(XAVEsspcont)
mycolorbar('horiz')
title('mean log ESD')
subplot(2,2,2)
imagesc(XVARsspcont)
mycolorbar('horiz')
title('var ESD')
subplot(2,2,3)
imagesc(XSTDsspcont)
mycolorbar('horiz')
title('std ESD')
%...................................................................................
%===================================================================================
%***********************************************************************************
return
