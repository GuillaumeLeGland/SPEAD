function [Vdot] = jamstecrest_gaussecomodel1D_ode45eqs(iTime,V0)
global galfa gbeta
global gzmax kgz mz betaz betap mpower 
global mp Isat numut 
global alp0 mup0 knp0 
global aalp amup aknp bmup 
global Q10
global ntot0 
global sst0 sst 
global jcounter 
global iTimeode 
global keyTraitAxis keyPhysics keySinking 
global Sdin Mdin Drate 
global epsPhy omePhy epsZoo omeZoo md 
global t0 deltat ndays nyear tmax tspan 
global zdepths ndepths deltaz
global jday jjday
global Iave Ivar Istd %continuous model
global Iphy Izoo Idin Ipon Ibox %continuous model
global KZ KZI
global parz0
global kw kp wsink
global keyNutrientSupply 
%...................................................................................
global Xavedotday Xvardotday Xstddotday %OUTPUTS 
global UXday GXday 
global d1UXdxday d1GXdxday 
global d2UXdxday d2GXdxday 
global todedotday 
%...................................................................................
global Xavedotout Xvardotout Xstddotout %OUTPUTS 
global UXout GXout 
global d1UXdxout d1GXdxout 
global d2UXdxout d2GXdxout 
global todedotout 
%...................................................................................
global FPHYToutcont EPHYToutcont MPHYToutcont GPHYToutcont %OUTPUTS 
global FZOOoutcont  EZOOoutcont  MZOOoutcont 
global FDINoutcont  FPONoutcont
%...................................................................................
global DIFFxaveout DIFFxvarout DIFFxstdout 
%...................................................................................

%%%%%%%%%%%%%%%%%
%STATE VARIABLES:
%%%%%%%%%%%%%%%%%
%===================================================================================
%...................................................................................
phy  = V0(Iphy);
zoo  = V0(Izoo);
din  = V0(Idin);
pon  = V0(Ipon);
box  = V0(Ibox);
%...................................................................................
%===================================================================================
%VERTICAL MIXING OF STATISTICAL MOMENTS:
%...................................................................................
if strcmp(keyPhysics,'not')
    %...............................................................................
    xave = V0(Iave); %mean size
    xvar = V0(Ivar); %variance
    xstd = V0(Istd); %deviation
    %...............................................................................
elseif strcmp(keyPhysics,'yes')
    %...............................................................................
    xave_star = V0(Iave); %mean size times phy.
    xvar_star = V0(Ivar); %mean size squared plus variance times phy.
    xstd_star = V0(Istd); %mean size plus standardeviation times phy.
    %...............................................................................
    %WRONG!!!
% $$$     xave = (xave_star./phy); %mean size
% $$$     xvar = (xvar_star./phy); %variance
% $$$     xstd = (xstd_star./phy); %deviation
    %...............................................................................
    %OKAY: 
    xave = (xave_star./phy); %mean size
    xvar = (xvar_star./phy) - xave.^2; %variance
    xstd = (xstd_star./phy) - xave; %deviation
    %...............................................................................
end
%...................................................................................
%===================================================================================
%................................................................................... 
VNPZD0 = [phy;zoo;din;pon]; 
%...................................................................................
VSTAT0 = [xave;xvar;xstd]; 
%................................................................................... 
%===================================================================================

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%DAY OF SIMULATION ANT TIME COUNTER:
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%===================================================================================
%...................................................................................
[jday,jjday,newday] = jamstecrest_daycounter(jday,iTime);
%...................................................................................
jcounter1 = jcounter; %Previous jcounter.
%...................................................................................
jcounter = floor(iTime/deltat); %For ode4.
% $$$ jcounter = floor(iTime/deltat) + 1; %For ode1.
%...................................................................................
jcounter2 = jcounter; %Current jcounter.
%...................................................................................
%===================================================================================

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%CHECK FOR NEGATIVE CONCENTRATIONS:
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%========================================================================
%........................................................................
Ineg = find(VNPZD0 < 0);
%........................................................................
if length(Ineg > 0)
    iTime
    disp(['P , Z , N , D']);
    wconcs = [phy,zoo,din,pon]
    wdilut = [Drate(jcounter),Sdin(jcounter)]
    wconcsNeg = VNPZD0(Ineg);
    disp('Error!!! there are NEGATIVE concentrations!')
    pause
end
%........................................................................
%========================================================================

%%%%%%%%%%%%%%%%%%%
%MASS CONSERVATION:
%%%%%%%%%%%%%%%%%%%
%===================================================================================
%...................................................................................
ntoti = sum([phy + zoo + din + pon + box]); %Checking mass conservation.
%...................................................................................
%%ydistmax = 1d-6; %original. 
ydistmax = 1d-3; %less strict level (for fast-numerical-solving)
ydist = abs(ntoti - ntot0);
%...................................................................................
%%if strcmp(keyNutrientSupply,'not') 
if abs(ydist) > ydistmax 
    masscheck_N = [iTime,jday,ntot0,ntoti,ydist]
    disp('Error!!! mass is NOT conserved!')
    pause
end 
%%end 
%...................................................................................
if mod(jjday,10) == 0 %show every 10 days
    if strcmp(newday,'yes')
    masscheck = [iTime,jday,ntot0,ntoti,ydist]
    % disp('-------------------------------------------------')
    end
end
%...................................................................................
%===================================================================================

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%MEAN TRAIT (j) OF THE GAUSSIAN DISTRIBUTION:
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%===================================================================================
%...................................................................................
xj = xave; 
xmj = xave; 
%...................................................................................
%%sigmaxj = xstd; %THIS I DONT REALLY KNOW WHY IS NOT WORKING.
sigmaxj = sqrt(xvar); %THIS SHOULD BE CORRECT ONE FOR SURE. 
%...................................................................................
%===================================================================================

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%CHECK FOR NEGATIVE VARIANCE:
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%===================================================================================
%...................................................................................
Ineg = find(xvar < 0);
%...................................................................................
xvar(Ineg) = sqrt(eps); %To avoid negative variances -- Force them to be close to zero value.
%...................................................................................
Jneg = find(xvar < 0);
%...................................................................................
%>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
% $$$ if iTime > 9 
% $$$     x_ave_var_std2 = [xave,xvar,xstd.^2]
% $$$ end
%<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
%...................................................................................
if length(Jneg > 0)
    iTime
    x_ave_var_std2 = [xave,xvar,xstd.^2]
    disp('Error!!! x_variance is negative!!!')
    pause 
end
%...................................................................................
%===================================================================================

%%%%%%%%%%%%%%%%%%%%%%%
%GAUSSIAN DISTRIBUTION:
%%%%%%%%%%%%%%%%%%%%%%%
% If variance is zero, singular values are obtained (Le Gland, 12/06/2019)
% Since these derivatives are NOT necessary, they can be removed to avoid failure
if sigmaxj > 0
    fxj = (1.0 ./ (sigmaxj * sqrt(2*pi))) .* exp( -(xj - xmj).^2 ./ (2*sigmaxj.^2) ); %Okay.

    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    %PHYTOPLANKTON BIOMASS GAUSSIAN DISTRIBUTION:
    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    Ptot = phy;
    Pxj = Ptot .* fxj; 
    Pxjalfa = Pxj.^galfa; 

    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    %ANALYTICAL INTEGRATION OF PHYTOPLANKTON GASSIAN DISTRUBUTION:
    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    %===================================================================================
    %...................................................................................
    intPxdx = Ptot;
    %...................................................................................

    intPxalfadx = (Ptot.^galfa ./ sqrt(galfa)) .* (sigmaxj*sqrt(2*pi)).^(1-galfa); 
    %...................................................................................
    %===================================================================================

    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    %ANALYTICAL DERIVATIVES OF PHYTOPLANKTON GAUSSIAN DISTRIBUTION:
    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    %===================================================================================
    %...................................................................................
    dPxdx = -(xj - xmj) .* (Pxj ./ sigmaxj.^2); 
    %...................................................................................
    d2Pxdx = Pxj .* ( ((xj - xmj).^2 ./ sigmaxj.^4) - (1.0 ./ sigmaxj.^2) ); 
    %...................................................................................
    %===================================================================================

    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    %ANALYTICAL DERIVATIVES OF PHYTOPLANKTON-ALFA GAUSSIAN DISTRIBUTION:
    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    %===================================================================================
    %...................................................................................
    dPxalfadx = galfa .* (Pxj.^galfa) .* (- (xj - xmj) ./ sigmaxj.^2); %Okay!!!
    %...................................................................................
    d2Pxalfadx = galfa.*Pxjalfa .* (galfa.*((xj - xmj).^2 ./ sigmaxj.^4) - (1.0./sigmaxj.^2)); 
    %...................................................................................
    %===================================================================================

    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    %GRAZING FUNCTIONAL RESPONSE KTW:
    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    %===================================================================================
    %...................................................................................
    Vmax = (gzmax*zoo); 
    Qswitchj = (Pxjalfa ./ intPxalfadx); 
    Qfeeding = (intPxdx.^gbeta ./ (intPxdx.^gbeta + kgz^gbeta)); %Okay.
    %...................................................................................
    Gxj = Qswitchj .* Qfeeding .* Vmax; 
    %...................................................................................
    %>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
    % $$$ disp('*** pto1 ***')
    % $$$ Pxjalfa,intPxalfadx 
    % $$$ Qswitchj,Qfeeding,Vmax 
    % $$$ Gxj,Pxj,(Gxj./Pxj) %[d-1] 
    % $$$ pause
    %<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
    %===================================================================================

    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    %ANALYTICAL DERIVATIVES OF GRAZING KTW FUNCTION:
    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    %===================================================================================
    %...................................................................................
    A = (sigmaxj*sqrt(2*pi)).^(1-galfa) .* (1./sqrt(galfa)); 
    %...................................................................................
    %%G = (Ptot^gbeta / (Ptot^gbeta + kgz^gbeta)) * Vmax; 
    G = (Qfeeding .* Vmax); 
    %...................................................................................
    B = (G./A); 
    %...................................................................................
    d1Gxdx = galfa .* fxj.^galfa .* (- (xj - xmj) ./ sigmaxj.^2) .* B;
    %...................................................................................
    d2Gxdx = galfa .* fxj.^galfa .* (galfa .* ((xj - xmj).^2 ./ sigmaxj.^4) - (1./sigmaxj.^2)) .* B;
    %...................................................................................
    %===================================================================================

    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    %BIOMASS SPECIFIC GRAZING FUNCTIONAL RESPONSE KTW:
    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    %...................................................................................
    gxj = Gxj./Pxj; %[d-1] 
    %...................................................................................

    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    %ANALYTICAL DERIVATIVES OF BIOMASS SPECIFIC GRAZING FUNCTIONAL RESPONSE KTW:
    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    %===================================================================================
    %...................................................................................
    d1gxdx = gxj .* (galfa - 1) .* (-(xj - xmj) ./ sigmaxj.^2 ); 
    %...................................................................................
    d2gxdx = gxj .* (galfa - 1) .* ( (galfa - 1) .* (-(xj - xmj) ./ sigmaxj.^2).^2 - (1./sigmaxj.^2) );
    %...................................................................................
    %===================================================================================
    
else
    fxj = (xj == xmj);
    Vmax = (gzmax*zoo);
    Qfeeding = ( phy.^gbeta ./ ( phy.^gbeta + kgz^gbeta ) );
    Gxj = Qfeeding .* Vmax;
    d1gxdx = 0;
    d2gxdx = 0;
end

%%%%%%%%%%%%%%%%%%%%%
%TURBULENT DIFFUSION:
%%%%%%%%%%%%%%%%%%%%%
%===================================================================================
%...................................................................................
kz  = KZ (:,jday);
kzI = KZI(:,jday);
%...................................................................................
%===================================================================================
%STATISTICAL MOMENTS:
if strcmp(keyPhysics,'yes')
%...................................................................................
DIFFxave_star = zeros(ndepths,1);
DIFFxvar_star = zeros(ndepths,1);
DIFFxstd_star = zeros(ndepths,1);
%...................................................................................
[DIFFxave_star] = jamstecrest_TurbulentDiffusion(xave_star,deltat,deltaz,kz,kzI,ndepths,'Reflectante');
[DIFFxvar_star] = jamstecrest_TurbulentDiffusion(xvar_star,deltat,deltaz,kz,kzI,ndepths,'Reflectante');
[DIFFxstd_star] = jamstecrest_TurbulentDiffusion(xstd_star,deltat,deltaz,kz,kzI,ndepths,'Reflectante');
%...................................................................................
end
%===================================================================================
%PLANKTON BIOMASSES:
%...................................................................................
DIFFphy = zeros(ndepths,1);
DIFFzoo = zeros(ndepths,1);
DIFFdin = zeros(ndepths,1);
DIFFpon = zeros(ndepths,1);
%...................................................................................
%pon
[DIFFphy] = jamstecrest_TurbulentDiffusion(phy,deltat,deltaz,kz,kzI,ndepths,'Reflectante');
[DIFFzoo] = jamstecrest_TurbulentDiffusion(zoo,deltat,deltaz,kz,kzI,ndepths,'Reflectante');
[DIFFdin] = jamstecrest_TurbulentDiffusion(din,deltat,deltaz,kz,kzI,ndepths,'Reflectante');
[DIFFpon] = jamstecrest_TurbulentDiffusion(pon,deltat,deltaz,kz,kzI,ndepths,'Reflectante');
%pon
%...................................................................................
%===================================================================================

%%%%%%%%%%%%%%%%%%
%VERTICAL SINKING:
%%%%%%%%%%%%%%%%%%
%========================================================================
if strcmp(keyPhysics,'not')
    %....................................................................
    ADVxave = zeros(ndepths,1);
    ADVxvar = zeros(ndepths,1);
    ADVxstd = zeros(ndepths,1);
    %....................................................................
elseif strcmp(keyPhysics,'yes')
    %....................................................................
    ADVxave_star = zeros(ndepths,1);
    ADVxvar_star = zeros(ndepths,1);
    ADVxstd_star = zeros(ndepths,1);
    %....................................................................
end
%........................................................................
%========================================================================
%........................................................................
ADVphy = zeros(ndepths,1);
ADVzoo = zeros(ndepths,1);
ADVdin = zeros(ndepths,1);
ADVpon = zeros(ndepths,1);
%........................................................................
[ADVpon] = jamstecrest_SinkingAdvection(pon,deltaz,wsink,ndepths);
%pon
%........................................................................
%========================================================================

%%%%%%%
%LIGHT:
%%%%%%%
%========================================================================
%........................................................................
jpar0 = parz0(jday); %Photo. Active. Radiation at the surface [W*m-2]
%........................................................................
jPAR  = jpar0*exp(-kw*zdepths(:)); %[W*m-2] PAR profile.
%........................................................................
Qpar = (jPAR / Isat).*exp(1 - (jPAR/Isat)); %Phy light limitation [n.d.] values between 0 and 1.
%........................................................................
%========================================================================
%------------------------------------------------------------------------
%NOTE: To keep the same DIN trade-off, both "mup" and "alp" ** must ** be 
%multiplied by the environmental limitation factor (eg. Qpar or Qsst) 
%Otherwise, if Qpar or Qsst only multiplies "mup", the optimal size for a 
%given DIN value will shift up and down instead of remaining always at 
%the same ESDphy value. 
%------------------------------------------------------------------------
%........................................................................
% $$$ alp = alp0*ones(ndepths,1); 
% $$$ mup = mup0*ones(ndepths,1);
%........................................................................
alp = alp0*Qpar; 
mup = mup0*Qpar;
%........................................................................
%========================================================================

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%PHYTOPLANKTON NUTRIENT UPTAKE:
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
if strcmp(keyTraitAxis,'ESD')

    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    %PHYTOPLANKTON GROWTH UPTAKE RATE MICHAELIS MENTEN FUNCTION:
    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    %===============================================================================
    %...............................................................................
    knp = (mup./alp); 
    %...............................................................................
    %===============================================================================
    %EXPONENTIAL UPTAKE AFFINITY: 
    %...............................................................................
    knxj = knp .* exp(aknp*xj); %Phy half-sat uptake as a function of cell size [mmolN*m-3]
    %knxj = exp(xj); % Case where trait is half-saturation (Le Gland, 26/06/2019)
    %...............................................................................
    %===============================================================================
    %EXPONENTIAL MAXIMUM GROWTH RATE: 
    %...............................................................................
% $$$     muxj = mup .* exp(amup*xj); %Phy maximum grazing rate as a function of cell size [d-1]
    %...............................................................................
    %===============================================================================
    %UNIMODAL MAXIMUM GROWTH RATE:
    %...............................................................................
    muxj = mup .* exp(amup*xj + bmup*xj.^2);
    %muxj = mup .* exp(amup*(xj-log(knp))/aknp); % Case where trait is half-saturation (Le Gland, 26/06/2019)
    %...............................................................................
    %===============================================================================
    %...............................................................................
    lxj = (knxj ./ (knxj + din)); %[n.d.]
    qxj = (din  ./ (din + knxj)); %[n.d.]
    %...............................................................................
    uxj = muxj .* qxj; %[d-1] 
    %...............................................................................
    %===============================================================================

    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    %ANALYTICAL DERIVATIVES OF GROWTH UPTAKE RATE MICHAELIS MENTEN FUNCTION:
    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    %===============================================================================
    %MY DERIVATIONS FOR MICHAELIS MENTEN: 
    %...............................................................................
    d1qxdx = - qxj .* (aknp * lxj);
    %d1qxdx = - qxj .* lxj; % Case where trait is half-saturation (Le Gland, 26/06/2019)
    d1lxdx = - d1qxdx; 
    %...............................................................................
    d2qxdx = -aknp * (d1lxdx .* qxj + d1qxdx .* lxj); 
    %d2qxdx = d1lxdx .* qxj + d1qxdx .* lxj; % Case where trait is half-saturation (Le Gland, 26/06/2019)
    d2lxdx = - d2qxdx; 
    %...............................................................................
    d3qxdx = -aknp * (d2lxdx .* qxj + d2qxdx .* lxj + 2 * d1lxdx .* d1qxdx); 
    %d3qxdx = d2lxdx .* qxj + d2qxdx .* lxj + 2 * d1lxdx .* d1qxdx; % Case where trait is half-saturation (Le Gland, 26/06/2019)
    d3lxdx = - d3qxdx; 
    %...............................................................................
    d4qxdx = -aknp * ((d3lxdx .*   qxj  + d2lxdx .* d1qxdx) + ...
	              (d3qxdx .*   lxj  + d2qxdx .* d1lxdx) + ...
	              (d2lxdx .* d1qxdx + d1lxdx .* d2qxdx) * 2);
    %d4qxdx = ((d3lxdx .*   qxj  + d2lxdx .* d1qxdx) + ...
	%              (d3qxdx .*   lxj  + d2qxdx .* d1lxdx) + ...
	%              (d2lxdx .* d1qxdx + d1lxdx .* d2qxdx) * 2); % Case where trait is half-saturation (Le Gland, 26/06/2019)
              
    %...............................................................................
    %===============================================================================
    %FROM BINGZANG CHEN FOR MICHAELIS MENTEN: 
    %...............................................................................
% $$$     d1qxdx_bis = -aknp*knxj.*qxj.^2;
% $$$     d2qxdx_bis = -aknp^2*din.*knxj.*(1./(din+knxj).^2 - 2*knxj./(din+knxj).^3);
% $$$     d3qxdx_bis =  aknp^3*din.*knxj.*(2*din.*knxj-(knxj-din).^2)./(knxj+din).^4;
% $$$     d4qxdx_bis =  aknp^4*din.*knxj.*(11*knxj.*din.*(din-knxj)+knxj.^3-din.^3)./(din+knxj).^5; 
    %...............................................................................
% $$$     d1lxdx = - d1qxdx_bis; 
% $$$     d2lxdx = - d2qxdx_bis; 
% $$$     d3lxdx = - d3qxdx_bis; 
    %...............................................................................
    %===============================================================================
    %MY DERIVATIONS FOR NUTRIENT UPTAKE USING EXPONENTIAL GROWTH RATE WITH SIZE: 
    %...............................................................................
% $$$     gff = (amup - aknp * lxj);
% $$$     %...............................................................................
% $$$     d1uxdx =   uxj  .*  gff; 
% $$$     %...............................................................................
% $$$     d2uxdx =   uxj  .* (gff.^2 - aknp^2 * lxj .* qxj); 
% $$$     %...............................................................................
% $$$     d3uxdx = d2uxdx .*  gff - 2*aknp * (d1uxdx .* d1lxdx) - aknp * (uxj .* d2lxdx); 
% $$$     %...............................................................................
% $$$     d4uxdx = d3uxdx .*  gff - 3*aknp * (d2uxdx .* d1lxdx + d1uxdx .* d2lxdx) - aknp * (uxj .* d3lxdx); 
    %...............................................................................
    %===============================================================================
    %FROM BINGZANG CHEN FOR UNIMODAL MAXIMUM GROWTH RATE WITH SIZE: 
    %...............................................................................
    cff = (amup + 2*bmup*xj); 
    % cff = amup / aknp; % Case where trait is half-saturation (Le Gland, 26/06/2019)
    %...............................................................................
    d1muxdx = muxj.*cff;
    d2muxdx = muxj*2*bmup + muxj.*cff.^2;
    d3muxdx = (2*bmup+cff.^2).*d1muxdx + 4.*bmup*muxj.*cff;
    d4muxdx = d1muxdx*8*bmup.*cff + (2*bmup+cff.^2).*d2muxdx + 8*bmup.^2*muxj;
    %d2muxdx = muxj.*cff.^2; % Case where trait is half-saturation (Le Gland, 26/06/2019)
    %d3muxdx = muxj.*cff.^3; % Case where trait is half-saturation (Le Gland, 26/06/2019)
    %d4muxdx = muxj.*cff.^4; % Case where trait is half-saturation (Le Gland, 26/06/2019)
    %...............................................................................
    %===============================================================================
    %FROM BINGZANG CHEN FOR NUTRIENT UPTAKE USING UNIMODAL MAXIMUM GROWTH RATE: 
    %...............................................................................
    d1uxdx = (d1muxdx .* qxj) + (muxj .* d1qxdx);
    %...............................................................................
    d2uxdx = ((d2muxdx .*    qxj) + (d1muxdx .* d1qxdx)) + ...
	     ((d1muxdx .* d1qxdx) + (muxj    .* d2qxdx));
    %...............................................................................
    d3uxdx = ((d3muxdx .*    qxj) + (d2muxdx .* d1qxdx)) + ...
	     ((d2muxdx .* d1qxdx) + (d1muxdx .* d2qxdx)) + ...
	     ((d2muxdx .* d1qxdx) + (d1muxdx .* d2qxdx)) + ...
	     ((d1muxdx .* d2qxdx) + (muxj    .* d3qxdx));
    %...............................................................................
    d4uxdx = ((d4muxdx .*    qxj) + (d3muxdx .* d1qxdx)) + ...
	     ((d3muxdx .* d1qxdx) + (d2muxdx .* d2qxdx)) + ...
	     ((d3muxdx .* d1qxdx) + (d2muxdx .* d2qxdx)) + ...
	     ((d2muxdx .* d2qxdx) + (d1muxdx .* d3qxdx)) + ...
	     ((d3muxdx .* d1qxdx) + (d2muxdx .* d2qxdx)) + ...
	     ((d2muxdx .* d2qxdx) + (d1muxdx .* d3qxdx)) + ...
	     ((d2muxdx .* d2qxdx) + (d1muxdx .* d3qxdx)) + ...
	     ((d1muxdx .* d3qxdx) + (muxj    .* d4qxdx));
    %...............................................................................
    %===============================================================================
    
    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    %USING LAN SMITH ANALYTICAL DERIVATIVES: (JUST FOR CHECKING WITH HIM)
    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    %===============================================================================
% $$$     %...............................................................................
% $$$     %%gxjLan = (Vmax * Qfeeding) * (1 / Ptot) * ( sqrt(galfa) * exp(-(1/2)*(galfa-1)*((xj-xmj)/sigmaxj)^2))
% $$$     gxjLan = (Vmax .* Qfeeding) .* (1 ./ Ptot) .* sqrt(galfa); 
% $$$     %...............................................................................
% $$$     d1gxdxLan = zeros(ndepths,1); 
% $$$     %...............................................................................
% $$$     d2gxdxLan = -(Vmax .* Qfeeding) .* (1 ./ Ptot) .* ( (galfa - 1) .* sqrt(galfa) ./ sigmaxj.^2 );
% $$$     %...............................................................................
% $$$     Qdin = qxj; %[n.d.]
% $$$     %...............................................................................
% $$$     uxjLan = muxj .* Qdin; 
% $$$     %...............................................................................
% $$$     d1uxdxLan = (amup*muxj.*Qdin) - aknp*(knxj./(muxj.*din)).*(muxj.*Qdin).^2;
% $$$     %...............................................................................
% $$$     d2uxdxLan = (amup - 2*aknp*((knxj.*muxj.*Qdin)./(muxj.*din))) .* d1uxdxLan ...
% $$$ 	- aknp*(aknp - amup)*(knxj./(muxj.*din)).*(muxj.*Qdin).^2;
% $$$     %...............................................................................
% $$$     d3uxdxLan = (amup - 2*aknp*((knxj.*muxj.*Qdin)./(muxj.*din))) .* d2uxdxLan ...
% $$$ 	- 2*aknp*(knxj./(muxj.*din)) .* d1uxdxLan.^2 ...
% $$$         - 4*aknp*(aknp - amup)    .* ((knxj.*muxj.*Qdin)./(muxj.*din)) .* d1uxdxLan ...
% $$$ 	-   aknp*(aknp - amup).^2 .* ( knxj./(muxj.*din)) .* uxjLan.^2;
% $$$     %...............................................................................
% $$$     d4uxdxLan = (amup - 2*aknp*(muxj.*Qdin.*knxj./(muxj.*din))) .* d3uxdxLan ...
% $$$         - 6*(aknp*(aknp-amup))*(muxj.*Qdin.*knxj./(muxj.*din)) .* d2uxdxLan ...
% $$$ 	- 6*(aknp*(knxj./(muxj.*din))) .* (d1uxdxLan .* d2uxdxLan) ...
% $$$ 	- 6*(aknp*(aknp-amup))*(knxj./(muxj.*din)) .* d1uxdxLan.^2 ...
% $$$ 	- 6*(aknp*(aknp-amup).^2)*(muxj.*Qdin.*knxj./(muxj.*din)) .* d1uxdxLan ...
% $$$ 	- (aknp*(aknp-amup).^3)*(knxj./(muxj.*din)) .* (muxj.*Qdin).^2;
% $$$     %...............................................................................
% $$$     %%gxj = gxjLan;
% $$$     %%d1gxdx = d1gxdxLan;
% $$$     %%d2gxdx = d2gxdxLan;
% $$$     %...............................................................................
% $$$     %%uxj = uxjLan;
% $$$     %%d1uxdx = d1uxdxLan;
% $$$     %%d2uxdx = d2uxdxLan;
% $$$     %...............................................................................
    %===============================================================================

    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    %USING MATLAB SYMBOLIC TOOLBOX DERIVATIVES: (JUST FOR DOUBLE CHECK)
    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    %===============================================================================
    %...............................................................................
% $$$     [d1uxdxSymbolic,d2uxdxSymbolic,d3uxdxSymbolic,d4uxdxSymbolic] = jamstecrest_gaussecomodel1D_symbolicderivatives;
% $$$     %...............................................................................
% $$$     d1uxdxSym = eval(d1uxdxSymbolic); %Convert from symbolic to numerical values at double precision.
% $$$     d2uxdxSym = eval(d2uxdxSymbolic);
% $$$     d3uxdxSym = eval(d3uxdxSymbolic);
% $$$     d4uxdxSym = eval(d4uxdxSymbolic);
    %..............................................................................
    %>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
    %..............................................................................
% $$$     show_dudx1 = [d1uxdx,d1uxdxSym]
% $$$     show_dudx2 = [d2uxdx,d2uxdxSym]
% $$$     show_dudx3 = [d3uxdx,d3uxdxSym]
% $$$     show_dudx4 = [d4uxdx,d4uxdxSym]
% $$$     %..............................................................................
% $$$ % $$$     show_dudx1 = [d1uxdx,d1uxdxLan]
% $$$ % $$$     show_dudx2 = [d2uxdx,d2uxdxLan]
% $$$ % $$$     show_dudx3 = [d3uxdx,d3uxdxLan]
% $$$ % $$$     show_dudx4 = [d4uxdx,d4uxdxLan]
% $$$     %..............................................................................
% $$$ % $$$     show_dudx1 = [d1uxdx,d1uxdxLan,d1uxdxSym]
% $$$ % $$$     show_dudx2 = [d2uxdx,d2uxdxLan,d2uxdxSym]
% $$$ % $$$     show_dudx3 = [d3uxdx,d3uxdxLan,d3uxdxSym]
% $$$ % $$$     show_dudx4 = [d4uxdx,d4uxdxLan,d4uxdxSym]
% $$$     %..............................................................................
% $$$     disp('----')
% $$$     pause
    %<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
    %===============================================================================
elseif strcmp(keyTraitAxis,'SST')

    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    %USING NEW TRAIT Y-AXIS FOR THE OPTIMAL TEMPERATURE FOR GROWTH:
    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    %===============================================================================
    %...............................................................................
    % yj = xj; 
    % ymj = xmj; 
    %...............................................................................
    gammay = 4.0; %Tolerance range [Celsius]
% $$$     %%gammay = 1d6; %Control case without gaussian.
    %...............................................................................
% $$$     %%sstj = sst(jcounter); 
    sstj = sst(jday); 
    %...............................................................................
    q10 = Q10 ^((sstj - sst0)/10); 
    %...............................................................................
    qyj = exp(-(xj - sstj).^2 / (2*gammay^2)) * q10; %SST limitation [%]
    %...............................................................................
    knp = knp0*ones(ndepths,1);
    %...............................................................................
    uxj = mup .* qyj .* (din ./ (din + knp)); %Uptake rate [d-1] 
    %...............................................................................
    d1uxdx = uxj .* (  -(xj - sstj)/gammay^2);
    d2uxdx = uxj .* ( (-(xj - sstj)/gammay^2).^2 - (1/gammay^2) );
    % Third and fourth derivatives added, yj transformed to xj (Le Gland, 25/04/2019)
    d3uxdx = uxj .* ( (-(xj - sstj)/gammay^2).^3 + (xj - sstj)/gammay^4 + 2*(xj - sstj)/gammay^4 );
    d4uxdx = uxj .* ( (-(xj - sstj)/gammay^2).^4 - 3*((xj - sstj).^2)/gammay^6 - 3*((xj - sstj).^2)/gammay^6 + (3/gammay^4) );
    %...............................................................................
    %>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
% $$$     %...............................................................................
% $$$     qyj = q10; %Control case without gaussian. 
% $$$     uxj = mup .* qyj .* (din ./ (din + knp0)); %[d-1] 
% $$$     %...............................................................................
% $$$     d1uxdx  = 0d0;
% $$$     d2uxdx = 0d0;
% $$$     sigmax = 0d0;
% $$$     %...............................................................................
    %<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
    %===============================================================================
end

% Scheme to "artificially" increase competition (Le Gland, 14/05/2019)
% d1uxdx =  5*d1uxdx;
% d1gxdx =  5*d1gxdx;
% d2uxdx = 25*d2uxdx;
% d2gxdx = 25*d2gxdx;

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%ORDINARY DIFFERENTIAL EQUATIONS (ODEs):
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%===================================================================================
%...................................................................................
% $$$ ux = uxj + (1/2)*(sigmaxj.^2).*(d2uxdx); %Community upake rate gain.
%...................................................................................
% ux = uxj + (1/2)*(sigmaxj.^2).*(d2uxdx + numut.*d4uxdx) - (1/2)*3*numut.*d2uxdx; %Community upake rate gain [d-1].
%SIMPLIFICATION (Le Gland, 08/01/2019)
ux = uxj + (1/2)*(sigmaxj.^2).*d2uxdx;
% ux = uxj + (1/2)*(sigmaxj.^2).*(d2uxdx + numut.*d4uxdx) - (1/2)*3*numut.*d2uxdx + (3/24)*(sigmaxj.^4).*d4uxdx;
% Add kurtosis term (Le Gland, 25/04/2019)
% ux = ux + (3/24)*(sigmaxj.^4).*(d4uxdx - d4gxdx);
%...................................................................................
%===================================================================================
%...................................................................................
% $$$ gx = gxj + (1/2)*(sigmaxj.^2).*(d2gxdx); %Community grazing rate loss [d-1]. %WRONG!!!!
%...................................................................................
gx = (1./phy) .* Qfeeding .* Vmax; %Community grazing rate loss [d-1] %OKAY (NOTE: Ptot = phy) 
% Test with grazing equal to growth (Le Gland, 09/05/2019)
% gx = uxj + (1/2)*(sigmaxj.^2).*d2uxdx;
%...................................................................................
%>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
% $$$ disp('*** pto3 ***')
% $$$ whos phy Qfeeding Vmax 
% $$$ gx001 = gxj 
% $$$ gx002 = (1./phy) .* Qfeeding .* Vmax 
% $$$ pause 
%<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
%===================================================================================
%...................................................................................
Fphy = ux .* phy; %Phy primary production [mmolN * m-3 * d-1] 
Gphy = gx .* phy; %Phy grazing mortality [mmolN * m-3 * d-1] 
%%Mphy = mp  * phy; %Phy natural mortality [mmolN * m-3 * d-1] %Linear.
Mphy = mp  * (phy.*phy); %Phy natural mortality [mmolN * m-3 * d-1] %Quadratic.
% Test with grazing equal to growth (Le Gland, 09/05/2019)
% Mphy = 0;
%...................................................................................
Fzoo = Gphy; %Zoo second production [mmolN * m-3 * d-1]
Ezoo = (1-betaz) * Fzoo; %Zoo exudation [mmolN * m-3 * d-1] 
Ephy = (1-betap) * Fphy; %Phy exudation [mmolN * m-3 * d-1]
% Test with grazing equal to growth (Le Gland, 09/05/2019)
% Ephy = 0;
Mzoo = mz * (zoo.^mpower); %Zoo natural mortality [mmolN * m-3 * d-1]
%...................................................................................
Mpon = md*pon; %Det degradation to nutrients [mmolN * m-3 * d-1]
%...................................................................................
%>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
% $$$ disp('*** pto2 ***')
% $$$ % $$$ gxj,
% $$$ % $$$ (1/2)*(sigmaxj.^2).*(d2gxdx)
% $$$ gx 
% $$$ phy 
% $$$ Fzoo 
% $$$ pause
%<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
%===================================================================================
%-----------------------------------------------------------------------------------
% dsigma^2/dt = 2*sigma * dsigma/dt --> dsigma/dt = (1/(2*sigma)) * dsigma^2/dt
%-----------------------------------------------------------------------------------
%===================================================================================
%...................................................................................
dPHYdt =   Fphy - Ephy - Gphy - Mphy; 
%...................................................................................
dZOOdt =   Fzoo - Ezoo - Mzoo; 
%...................................................................................
dDINdt = - Fphy + epsPhy*Ephy + omePhy*Mphy + epsZoo*Ezoo + omeZoo*Mzoo + Mpon; 
%...................................................................................
dPONdt = (1-epsPhy)*Ephy + (1-omePhy)*Mphy + (1-epsZoo)*Ezoo + (1-omeZoo)*Mzoo - Mpon;
% disp '------------------------------'
% disp uxj,    disp (uxj(1))
% disp sigmaxj,disp (sigmaxj(1))
% disp d2uxdx, disp (d2uxdx(1))
% disp ux,     disp (ux(1))
% disp phy,    disp (phy(1))
% disp Fphy,   disp (Fphy(1))
% disp Ephy,   disp (Ephy(1))
% disp Gphy,   disp (Gphy(1))
% disp Mphy,   disp (Mphy(1))
% disp dPHYdt, disp (dPHYdt(1))
% disp dZOOdt, disp (dZOOdt(1))
% disp dDINdt, disp (dDINdt(1))
% disp dPONdt, disp (dPONdt(1))
% disp '------------------------------'
%...................................................................................
%===================================================================================
%.......................................  ............................................
%ORIGINAL:
% dXAVEdt = (sigmaxj.^2) .* (d1uxdx - d1gxdx + numut.*d3uxdx) - 3*numut.*d1uxdx; 
% dXVARdt = (sigmaxj.^4) .* (d2uxdx - d2gxdx + numut.*d4uxdx) - (sigmaxj.^2) .* (5*numut.*d2uxdx) + (2*numut.*uxj); 
%...................................................................................
%SIMPLIFIED: DOES NOT WORK!!! BLOWS UP AT TIME 700 days.
% dXAVEdt = (sigmaxj.^2) .* (d1uxdx - d1gxdx);
% dXVARdt = (sigmaxj.^4) .* (d2uxdx - d2gxdx) - (sigmaxj.^2) + (2*numut.*uxj); 
%...................................................................................
%SECOND SIMPLIFICATION (Le Gland, 08/01/2019)
% dXAVEdt = 0; % No variance case
dXAVEdt = (sigmaxj.^2) .* (d1uxdx - d1gxdx);
% dXAVEdt = (sigmaxj.^2) .* (d1uxdx - d1gxdx + numut.*d3uxdx) - 3*numut.*d1uxdx + (1/2)*(sigmaxj.^4).*d3uxdx;
% Add kurtosis term (Le Gland, 25/04/2019)
% dXAVEdt = dXAVEdt + (3/6)*(sigmaxj.^4) .* (d3uxdx - d3gxdx);
% dXVARdt = 0; % Constant variance case
dXVARdt = (sigmaxj.^4) .* (d2uxdx - d2gxdx) + (sigmaxj.^2) .* (numut.*d2uxdx) + (2*numut.*uxj);
% dXVARdt = (sigmaxj.^4) .* (d2uxdx - d2gxdx + numut.*d4uxdx) - (sigmaxj.^2) .* (5*numut.*d2uxdx) + (2*numut.*uxj);

% Test with grazing equal to growth (Le Gland, 09/05/2019)
% dXAVEdt = (sigmaxj.^2) .* (numut.*d3uxdx) - 3*numut.*d1uxdx;
% dXVARdt = (sigmaxj.^4) .* (numut.*d4uxdx) - (sigmaxj.^2) .* (5*numut.*d2uxdx) + (2*numut.*uxj);
% dXAVEdt = 0;
% dXVARdt = (sigmaxj.^2) .* (numut.*d2uxdx) + (2*numut.*uxj);

dXSTDdt = (1./(2*sigmaxj)) .* dXVARdt;

%................................................................................... 
%===================================================================================
%...................................................................................
FPHYToutcont(:,jcounter) = Fphy;
EPHYToutcont(:,jcounter) = Ephy;
GPHYToutcont(:,jcounter) = Gphy;
MPHYToutcont(:,jcounter) = Mphy;
%...................................................................................
FZOOoutcont(:,jcounter) = Fzoo;
EZOOoutcont(:,jcounter) = Ezoo;
MZOOoutcont(:,jcounter) = Mzoo;
%...................................................................................
FDINoutcont(:,jcounter) = epsPhy*Ephy + omePhy*Mphy + epsZoo*Ezoo + omeZoo*Mzoo + Mpon; 
FPONoutcont(:,jcounter) = (1-epsPhy)*Ephy + (1-omePhy)*Mphy + (1-epsZoo)*Ezoo + (1-omeZoo)*Mzoo;
%...................................................................................
%===================================================================================
%...................................................................................
%>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
%DEBUGGING:
% $$$ %...................................................................................
% $$$ %%if mod(ti,10)==0 %show every 10 days
% $$$ masscheck_N = [iTime,jday,ntot0,ntoti,ydist]
% $$$ wGdx = [gx,gxj,d1gxdx,d2gxdx]
% $$$ wUdx = [ux,uxj,d1uxdx,d2uxdx,d3uxdx,d4uxdx]
% $$$ % $$$ wBIOs = [xave,xvar,xstd,phy,zoo,din,pon]
% $$$ % $$$ wODEs = [dXAVEdt,dXVARdt,dXSTDdt,dPHYdt,dZOOdt,dDINdt,dPONdt]
% $$$ wBIOs = [phy,zoo,din,pon]
% $$$ wODEs = [dPHYdt,dZOOdt,dDINdt,dPONdt]
% $$$ %...................................................................................
% $$$ dispPHYdot = [dPHYdt,Fphy,Ephy,Fzoo,Mphy]
% $$$ dispZOOdot = [dZOOdt,Fzoo,Ezoo,Mzoo]
% $$$ dispDINdot = [dDINdt,Fphy,epsPhy*Ephy,omePhy*Mphy,epsZoo*Ezoo,omeZoo*Mzoo,Mpon] 
% $$$ dispPONdot = [dPONdt,(1-epsPhy)*Ephy,(1-omePhy)*Mphy,(1-epsZoo)*Ezoo,(1-omeZoo)*Mzoo,Mpon] 
% $$$ %...................................................................................
% $$$ disp('-------------')
% $$$ pause
% $$$ %%end
% $$$ %...................................................................................
% $$$ % $$$ dispPHYdot = [dPHYdt,dPHYdtBis]
% $$$ % $$$ dispZOOdot = [dZOOdt,dZOOdtBis]
% $$$ % $$$ dispDINdot = [dDINdt,dDINdtBis]
% $$$ % $$$ dispPONdot = [dPONdt,dPONdtBis]
% $$$ % $$$ pause 
% $$$ %...................................................................................
%<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
%===================================================================================

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%ADD EXTERNAL NUTRIENT SOURCES AND ALL STATE VARIABLES SINKS BY DILUTION:
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%===================================================================================
%...................................................................................
Dphy = Drate(jcounter)*phy; %Dilution of phytoplankton [mmolN*m-3*d-1]
Dzoo = Drate(jcounter)*zoo;
Ddin = Drate(jcounter)*din;
Dpon = Drate(jcounter)*pon;
%...................................................................................
Sno3 = Sdin(:,jcounter); %Supply of nutrients into the system [mmolN*m-3*d-1]
%...................................................................................
%%Dzoo = zeros(ndepths,1); %Remove washout dilution of zooplanton.
%...................................................................................
%===================================================================================
%...................................................................................

%din(1)
%dDINdt(1)
dPHYdt = dPHYdt - Dphy;
dZOOdt = dZOOdt - Dzoo;
dDINdt = dDINdt - Ddin + Sno3; %Only DIN has an input flux source.
dPONdt = dPONdt - Dpon;
%Ddin(1)
%Sno3(1)

%................................................................................... 
if strcmp(keyPhysics,'yes')
dXAVE_STARdt = (dPHYdt .* xave) + (dXAVEdt .* phy);
% dXVAR_STARdt = (dPHYdt .* xvar) + (dXVARdt .* phy);
% Change by Le Gland (23/04/2019)
dXVAR_STARdt = (dPHYdt .* xvar) + (dXVARdt .* phy) + (dPHYdt .* xave .* xave) + 2*(dXAVEdt .* xave .* phy);
dXSTD_STARdt = (dPHYdt .* xstd) + (dXSTDdt .* phy);
end

%...................................................................................
dBOXdt = -Sno3 + Dphy + Dzoo + Ddin + Dpon; %Virtual box to check mass conservation.
%...................................................................................
%===================================================================================

%%%%%%%%%%%%%%%%%%%%%%%%
%ADD PHYSICAL PROCESSES:
%%%%%%%%%%%%%%%%%%%%%%%%
%===================================================================================
%...................................................................................
phydot = dPHYdt + DIFFphy;
zoodot = dZOOdt + DIFFzoo;
dindot = dDINdt + DIFFdin;
pondot = dPONdt + DIFFpon + ADVpon; %Only PON has vertical sinking.
%dPONdt(1)
%DIFFpon(1)
%ADVpon(1)
%...................................................................................
boxdot = dBOXdt; 
%...................................................................................
%===================================================================================
if strcmp(keyPhysics,'not')
    %...............................................................................
    xavedot = dXAVEdt;
    xvardot = dXVARdt;
    xstddot = dXSTDdt;
    %...............................................................................
% $$$     xavedot = dXAVEdt + DIFFxave;
% $$$     xvardot = dXVARdt + DIFFxvar;
% $$$     xstddot = dXSTDdt + DIFFxstd;
    %...............................................................................
% $$$     xavedot = dXAVEdt + DIFFxaveout(:,jcounter);
% $$$     xvardot = dXVARdt + DIFFxvarout(:,jcounter);
% $$$     xstddot = dXSTDdt + DIFFxstdout(:,jcounter);
    %...............................................................................
elseif strcmp(keyPhysics,'yes')
    %...............................................................................
    xave_stardot = dXAVE_STARdt + DIFFxave_star;
    xvar_stardot = dXVAR_STARdt + DIFFxvar_star;
    xstd_stardot = dXSTD_STARdt + DIFFxstd_star;
    %...............................................................................
end
%...................................................................................
%===================================================================================
% if mod(jjday,10) == 0 %show every 10 days
%     if strcmp(newday,'yes')
%        PZDiPo = [phy(1), zoo(1), din(1), pon(1)]
%        derivP = [dPHYdt(1)+Dphy(1), Fphy(1), -Ephy(1), -Gphy(1), -Mphy(1), Dphy(1), DIFFphy(1)]
%        trait  = [xave(1), xvar(1), sqrt(xvar(1)), sigmaxj(1)]
%        growth = [ux(1), uxj(1), d2uxdx(1)]
%        derivx = [dXAVEdt(1), dXAVE_STARdt(1)]
%        dervar = [dXVARdt(1), dXVAR_STARdt(1)]
%        disp('-------------------------------------------------')
%     end
% end

%%%%%%%%%%
%STOCKAGE:
%%%%%%%%%%
%===================================================================================
%...................................................................................
todedotday(1,jday) = jday;
%...................................................................................
Xavedotday(:,jday) = dXAVEdt;
Xvardotday(:,jday) = dXVARdt;
Xstddotday(:,jday) = dXSTDdt;
%...................................................................................
d1UXdxday(:,jday) = d1uxdx;
d1GXdxday(:,jday) = d1gxdx;
%...................................................................................
d2UXdxday(:,jday) = d2uxdx;
d2GXdxday(:,jday) = d2gxdx;
%...................................................................................
UXday(:,jday) = ux;
GXday(:,jday) = gx;
%...................................................................................
%===================================================================================
%...................................................................................
todedotout(1,jcounter) = jcounter*deltat;
%...................................................................................
Xavedotout(:,jcounter) = dXAVEdt;
Xvardotout(:,jcounter) = dXVARdt;
Xstddotout(:,jcounter) = dXSTDdt;
%...................................................................................
d1UXdxout(:,jcounter) = d1uxdx;
d1GXdxout(:,jcounter) = d1gxdx;
%...................................................................................
d2UXdxout(:,jcounter) = d2uxdx;
d2GXdxout(:,jcounter) = d2gxdx;
%...................................................................................
UXout(:,jcounter) = ux;
GXout(:,jcounter) = gx;
%...................................................................................
%===================================================================================

%%%%%%%%
%OUTPUT:
%%%%%%%%
%===================================================================================
%...................................................................................
if strcmp(keyPhysics,'not')
    %...............................................................................
    Vdot = [xavedot;xvardot;xstddot;phydot;zoodot;dindot;pondot;boxdot];
    %...............................................................................
elseif strcmp(keyPhysics,'yes')
    %...............................................................................
    Vdot = [xave_stardot;xvar_stardot;xstd_stardot;phydot;zoodot;dindot;pondot;boxdot];
    %...............................................................................
end
%...................................................................................
%===================================================================================
%***********************************************************************************
return
